{
    "CWE-787": "Out-of-bounds Write. The software writes data past the end, or before the beginning, of the intended buffer. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Typically, this can result in corruption of data, a crash, or code execution. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results. Write-what-where Condition. Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. DoS. Crash, Exit, or Restart. Modify Memory. Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. Buffer Underwrite ('Buffer Underflow'). The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. Modify Memory. DoS. Crash, Exit, or Restart. Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Execute Unauthorized Code or Commands. Modify Memory. Bypass Protection Mechanism. Other. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. Untrusted Pointer Dereference. The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between userland and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment. Use of Out-of-range Pointer Offset. The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution. Access of Uninitialized Pointer. The program accesses or uses a pointer that has not been initialized. Read Memory. If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed. Expired Pointer Dereference. The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid. Read Memory. If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application. DoS. Crash, Exit, or Restart. If the expired pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution. Stack-based Buffer Overflow. A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). Modify Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Modify Memory. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Modify Memory. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. Heap-based Buffer Overflow. A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Modify Memory. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. An issue was discovered in CCN lite NUMBERTAG There is a heap based buffer overflow in APITAG and in ccnl_populate_cache for an array lacking NUMBERTAG termination when reading a binary CCNx or NDN file. This can result in Heap Corruption. This was addressed by fixing the memory management in APITAG in ccn lite ctrl.c. An issue was discovered in Free Lossless Image Format (FLIF NUMBERTAG The APITAG function in transform/palette_C.hpp allows remote attackers to cause a denial of service (heap based buffer overflow) or possibly have unspecified other impact via a crafted file. Leanify NUMBERTAG allows remote attackers to trigger an out of bounds write NUMBERTAG bytes) via a modified input file. njs through NUMBERTAG used in NGINX, has a heap based buffer overflow in APITAG after a resize, related to njs_array_prototype_splice in njs/njs_array.c, because of njs_array_expand size mishandling. Espruino before NUMBERTAG allows attackers to cause a denial of service (application crash) and potential Information Disclosure with a user crafted input file via a Buffer Overflow during syntax parsing because strncpy is misused in jslex.c.",
    "CWE-476": "NULL Pointer Dereference. A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. DoS. Crash, Exit, or Restart. NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution. NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions. Unchecked Return Value. The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. Unexpected State. DoS. Crash, Exit, or Restart. An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors. Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges. Improperly Controlled Sequential Memory Allocation. The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects. DoS. Resource Consumption (Memory). Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system. While the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service. Unchecked Return Value to NULL Pointer Dereference. The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution. While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur. Memory Allocation with Excessive Size Value. The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. DoS. Resource Consumption (Memory). Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system. null. wernsey/bitmap before NUMBERTAG allows a NULL pointer dereference via a NUMBERTAG bit image. ccnl ext mgmt.c in CCN lite before NUMBERTAG allows context dependent attackers to have unspecified impact by leveraging missing NULL pointer checks after ccnl_malloc. An issue was discovered in Embedthis APITAG before NUMBERTAG and Appweb before NUMBERTAG The server mishandles some HTTP request fields associated with time, which results in a NULL pointer dereference, as demonstrated by If Modified Since or If Unmodified Since with a month greater than NUMBERTAG. zephyr rtos version NUMBERTAG contains a NULL base pointer reference vulnerability in APITAG APITAG that can result in CPU Page Fault (error code NUMBERTAG This attack appear to be exploitable via a malicious application call the vulnerable kernel APIs (system APITAG and sys_ring_buf_put). An issue was discovered in the Tatsuya Kinoshita w3m fork before NUMBERTAG w3m allows remote attackers to cause a denial of service (segmentation fault and crash) via a crafted HTML page.",
    "CWE-434": "Interpretation Conflict. Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state. Unexpected State. Varies by Context. This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave. Unrestricted Upload of File with Dangerous Type. The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. Execute Unauthorized Code or Commands. Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system. null. Deployment of Wrong Handler. The wrong handler is assigned to process an object. Varies by Context. Unexpected State. An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type. Insufficient Type Distinction. The software does not properly distinguish between different types of elements in a way that leads to insecure behavior. Other. null. External Control of File Name or Path. The software allows user input to control or influence paths or file names that are used in filesystem operations. Read Files or Directories. Modify Files or Directories. The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker. Modify Files or Directories. Execute Unauthorized Code or Commands. The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects. This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker. Permissive List of Allowed Inputs. The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses. Bypass Protection Mechanism. null. Incomplete List of Disallowed Inputs. The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses. Bypass Protection Mechanism. Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism. A issue was discovered in APITAG CMS NUMBERTAG It allows remote attackers to execute arbitrary code because an administrator can add the permitted file extension .aassp, which is converted to .asp because the \"as\" substring is deleted. DISPUTED Typesetter CMS NUMBERTAG through NUMBERTAG allows admins to upload and execute arbitrary PHP code via a .php file inside a ZIP archive. NOTE: the vendor disputes the significance of this report because \"admins are considered trustworthy\"; however, the behavior \"contradicts our security policy\" and is being fixed for NUMBERTAG. In PESCMS Team NUMBERTAG attackers may upload and execute arbitrary PHP code through APITAG by placing a .php file in a ZIP archive. In APITAG NUMBERTAG FILETAG blocks .html uploads but there are several alternative cases in which HTML can be executed, such as a file with no extension or an unrecognized extension (e.g., the test or APITAG filename), because of FILETAG , and validate_safe_file in PATHTAG. An issue was discovered in OWASP APITAG Core Rule Set (CRS NUMBERTAG Use of APITAG instead of APITAG can bypass some PHP Script Uploads rules, because PHP automatically transforms dots into underscores in certain contexts where dots are invalid.",
    "CWE-93": "Improper Neutralization of CRLF Sequences ('CRLF Injection'). The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs. Modify Application Data. null. Improper Output Neutralization for Logs. The software does not neutralize or incorrectly neutralizes output that is written to logs. Modify Application Data. Hide Activities. Execute Unauthorized Code or Commands. Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility. This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file. Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting'). The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers. Modify Application Data. Gain Privileges or Assume Identity. CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the response the application intends to send, as well as allowing them to create additional responses entirely under their control. Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or r) and LF (line feed, also given by %0a or n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without being validated for malicious characters. Improper Neutralization of Line Delimiters. The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component. Unexpected State. As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. Improper Neutralization of Section Delimiters. The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component. Unexpected State. As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter. Net::SMTP in Ruby before NUMBERTAG is vulnerable to SMTP command injection via CRLF sequences in a RCPT TO or MAIL FROM command, as demonstrated by CRLF sequences immediately before and after a DATA substring. CRLF Injection in pypiserver NUMBERTAG and below allows attackers to set arbitrary HTTP headers and possibly conduct XSS attacks via a NUMBERTAG d NUMBERTAG a in a URI. gunicorn version NUMBERTAG contains a CVETAG : Improper Neutralization of CRLF Sequences in HTTP Headers vulnerability in \"process_headers\" function in PATHTAG that can result in an attacker causing the server to return arbitrary HTTP headers. This vulnerability appears to have been fixed in NUMBERTAG. In the urllib3 library through NUMBERTAG for Python, CRLF injection is possible if the attacker controls the request parameter. APITAG in bottle.py in bottle NUMBERTAG doesn't filter a \" \" sequence, which leads to a CRLF attack, as demonstrated by a redirect NUMBERTAG Set Cookie: name=salt\") call.",
    "CWE-835": "Loop with Unreachable Exit Condition ('Infinite Loop'). The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Amplification. An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. Use of Blocking Code in Single-threaded, Non-blocking Context. The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked. DoS. Resource Consumption (CPU). An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely. When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation. Due to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code. In Long Range Zip (aka lrzip NUMBERTAG there is an infinite loop and application hang in the unzip_match function in runzip.c. Remote attackers could leverage this vulnerability to cause a denial of service via a crafted lrz file. In The Sleuth Kit (TSK NUMBERTAG opening a crafted disk image triggers infinite recursion in APITAG in PATHTAG in libtskvs.a, as demonstrated by mmls. Incorrect interaction of the APITAG and APITAG functions in network.c in collectd NUMBERTAG and earlier allows remote attackers to cause a denial of service (infinite loop) of a collectd instance (configured with APITAG None\" and with empty APITAG options) via a crafted UDP packet. The lzw_add_to_dict function in imagew gif.c in libimageworsener.a in APITAG NUMBERTAG allows remote attackers to cause a denial of service (infinite loop) via a crafted image. The function wav_read in libwav.c in libwav through NUMBERTAG has an infinite loop.",
    "CWE-22": "Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Encoding Error. The software does not properly encode or decode the data, resulting in unexpected values. Unexpected State. null. Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. Relative Path Traversal. The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Absolute Path Traversal. The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. External Control of File Name or Path. The software allows user input to control or influence paths or file names that are used in filesystem operations. Read Files or Directories. Modify Files or Directories. The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker. Modify Files or Directories. Execute Unauthorized Code or Commands. The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects. This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker. APITAG before NUMBERTAG is vulnerable to directory traversal, leading to incorrect access control. It allows an attacker to read or execute files under PATHTAG (which should be a protected directory). Additionally, attackers can upload temporary files (e.g., .jsp files) into PATHTAG which can lead to remote command execution (with the permissions of the user running the APITAG application). APITAG before NUMBERTAG RC1 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as APITAG Slip'. APITAG NUMBERTAG and older Directory Traversal. In APITAG through NUMBERTAG cgi APITAG accepts a partial absolute pathname (omitting the initial /etc), even though it was intended to only read a file in the PATHTAG format. NOTE: this issue exists because of an incomplete fix for CVETAG and CVETAG . Fiyo CMS NUMBERTAG has an arbitrary file delete vulnerability in PATHTAG via directory traversal in the file parameter during an act=db action.",
    "CWE-200": "Exposure of Sensitive Information to an Unauthorized Actor. The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. Read Application Data. There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been scrubbed or sanitized a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an information exposure, but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information. Insertion of Sensitive Information Into Sent Data. The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor. Read Files or Directories. Read Memory. Read Application Data. Sensitive data may be exposed to attackers. Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). Observable Discrepancy. The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not. Read Application Data. Bypass Protection Mechanism. An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system. Read Application Data. When cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case. Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel. Generation of Error Message Containing Sensitive Information. The software generates an error message that includes sensitive information about its environment, users, or associated data. Read Application Data. Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server. The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query. Exposure of Sensitive Information Due to Incompatible Policies. The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed. Read Application Data. When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users. Insertion of Sensitive Information Into Debugging Code. The application inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production. Read Application Data. When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers. Exposure of Private Personal Information to an Unauthorized Actor. The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected. Read Application Data. There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation. Some types of private information include: Government identifiers, such as Social Security Numbers Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was) Employment history Financial data - such as credit card numbers, salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns - such as web surfing history, when certain activities are performed, etc. Relationships (and types of relationships) with others - family, friends, contacts, etc. Communications - e-mail addresses, private messages, text messages, chat logs, etc. Health - medical conditions, insurance status, prescription records Account passwords and other credentials Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry. Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private. Exposure of Sensitive System Information to an Unauthorized Control Sphere. The application does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the application does. Read Application Data. Network-based software, such as web applications, often runs on top of an operating system or similar environment. When the application communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the application itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism. Insertion of Sensitive Information into Externally-Accessible File or Directory. The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information. Read Files or Directories. null. Sensitive Non-Volatile Information Not Protected During Debug. Access to security-sensitive information stored in fuses is not limited during debug. Modify Memory. Bypass Protection Mechanism. Several security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information. Exposure of Sensitive System Information Due to Uncleared Debug Information. The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered. Read Memory. Bypass Protection Mechanism. Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties. Device Unlock Credential Sharing. The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information. Modify Memory. Read Memory. Modify Files or Directories. Read Files or Directories. Modify Application Data. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Once unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials. \u201cUnlocking a device\u201d often means activating certain, unadvertised, debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is \u201clocked\u201d in the production part. Unless the device gets unlocked by supplying the proper credentials the debug capablilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are the all employed by the same company, the compromise of the credentials are greatly reduced. However, when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised. Debug Messages Revealing Unnecessary Information. The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages. Read Memory. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Varies by Context. LIKELIHOOD. Medium. Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the \u201csecurity by obscurity\u201d factor. While \u201csecurity by obscurity\u201d alone is insufficient, it can help as a part of \u201cDefense-in-depth\u201d. Sensitive Information Uncleared Before Debug/Power State Transition. Sensitive information may leak as a result of a debug or power state transition when information access restrictions change as a result of the transition. Read Memory. Read Application Data. LIKELIHOOD. High. Sensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could could be used to compromise device security. A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information make leak from the system. Cloneable Class Containing Sensitive Information. The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class. Bypass Protection Mechanism. A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed. Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor. Serializable Class Containing Sensitive Data. The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class. Read Application Data. an attacker can write out the class to a byte stream, then extract the important data from it. Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it. The CLI in npm before NUMBERTAG and NUMBERTAG before NUMBERTAG as used in FILETAG NUMBERTAG before NUMBERTAG before NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG includes bearer tokens with arbitrary requests, which allows remote HTTP servers to obtain sensitive information by reading Authorization headers. An issue was discovered in APITAG before NUMBERTAG The method APITAG in the APITAG class checks the APITAG of APITAG but not APITAG By leveraging this vulnerability, an adversary can make an inaccessible file be available (the credential of the app, for instance). APITAG NUMBERTAG fails to prevent fingerprinting primarily via a discrepancy between response headers when responding to different HTTP methods, also via predictible responses when accessing and interacting with the \"SITE_PATH_QUERY\". The password reset form in Weblate before NUMBERTAG provides different error messages depending on whether the email address is associated with an account, which allows remote attackers to enumerate user accounts via a series of requests. Hapi versions less than NUMBERTAG implement CORS incorrectly and allowed for configurations that at best returned inconsistent headers and at worst allowed cross origin activities that were expected to be forbidden. If the connection has CORS enabled but one route has it off, and the route is not GET, the OPTIONS prefetch request will return the default CORS headers and then the actual request will go through and return no CORS headers. This defeats the purpose of turning CORS on the route.",
    "CWE-79": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Bypass Protection Mechanism. Read Application Data. The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also. Execute Unauthorized Code or Commands. In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. Download of Code Without Integrity Check. The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. Execute Unauthorized Code or Commands. Alter Execution Logic. Other. Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit. Incomplete List of Disallowed Inputs. The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses. Bypass Protection Mechanism. Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism. Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS). The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages. Read Application Data. Execute Unauthorized Code or Commands. This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user. Improper Neutralization of Script in an Error Message Web Page. The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page. Read Application Data. Execute Unauthorized Code or Commands. Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible. Improper Neutralization of Script in Attributes in a Web Page. The software does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style. Read Application Data. Execute Unauthorized Code or Commands. null. Improper Neutralization of Encoded URI Schemes in a Web Page. The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings. Unexpected State. null. Doubled Character XSS Manipulations. The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters. Read Application Data. Execute Unauthorized Code or Commands. null. Improper Neutralization of Invalid Characters in Identifiers in Web Pages. The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers. Read Application Data. Execute Unauthorized Code or Commands. Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks. Improper Neutralization of Alternate XSS Syntax. The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax. Read Application Data. Execute Unauthorized Code or Commands. null. Incomplete Denylist to Cross-Site Scripting. The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed. Execute Unauthorized Code or Commands. While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The XSS Cheat Sheet [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists. Cross-Site Request Forgery (CSRF). The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Application Data. Modify Application Data. DoS. Crash, Exit, or Restart. The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting'). The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers. Modify Application Data. Gain Privileges or Assume Identity. CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the response the application intends to send, as well as allowing them to create additional responses entirely under their control. Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or r) and LF (line feed, also given by %0a or n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without being validated for malicious characters. In Bootstrap before NUMBERTAG SS is possible in the collapse data parent attribute. PATHTAG in APITAG NUMBERTAG has Reflected XSS on PATHTAG via the mac parameter. A reflected Cross site Scripting (XSS) vulnerability exists in APITAG NUMBERTAG ia the OCF_EMOTICON_CELL.tpl FIELD_NAME field to APITAG. Multiple cross site scripting (XSS) vulnerabilities in the administrative backend in APITAG NUMBERTAG allow remote authenticated users to inject arbitrary web script or HTML via the NUMBERTAG lrealname field in the APITAG form to PATHTAG the NUMBERTAG data[title] or NUMBERTAG data[description] field in the APITAG form to APITAG the NUMBERTAG note text\" field in the APITAG form to APITAG or the NUMBERTAG APITAG or NUMBERTAG APITAG field in the APITAG form to PATHTAG. Multiple Cross Site Scripting (XSS) were discovered in APITAG NUMBERTAG Cendana before NUMBERTAG The vulnerabilities exist due to insufficient filtration of user supplied data (id) passed to the PATHTAG and PATHTAG URLs. An attacker could execute arbitrary HTML and script code in a browser in the context of the vulnerable website.",
    "CWE-352": "Unintended Proxy or Intermediary ('Confused Deputy'). The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. Gain Privileges or Assume Identity. Hide Activities. Execute Unauthorized Code or Commands. If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources. External Control of Critical State Data. The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors. Bypass Protection Mechanism. Gain Privileges or Assume Identity. An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges. Read Application Data. The state variables may contain sensitive information that should not be known by the client. DoS. Crash, Exit, or Restart. By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition. If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an authenticated=true cookie. An attacker may simply create this cookie in order to bypass the authentication. Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Bypass Protection Mechanism. Read Application Data. The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also. Execute Unauthorized Code or Commands. In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. Origin Validation Error. The software does not properly verify that the source of data or communication is valid. Gain Privileges or Assume Identity. Varies by Context. An attacker can access any functionality that is inadvertently accessible to the source. null. Insufficient Session Expiration. According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization. Bypass Protection Mechanism. null. Cross-Site Request Forgery (CSRF). The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Application Data. Modify Application Data. DoS. Crash, Exit, or Restart. The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. Sensitive Cookie with Improper SameSite Attribute. The SameSite attribute for sensitive cookies is not set, or an insecure value is used. Modify Application Data. LIKELIHOOD. Low. If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a simple Content-Type header in the HTTP request and many more. The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens). Cross site request forgery (CSRF) vulnerability in Piwigo through NUMBERTAG allows remote attackers to hijack the authentication of users for requests to delete permalinks via a crafted request. public/rolechangeadmin in Faveo NUMBERTAG allows CSRF. The impact is obtaining admin privileges. There is a CSRF vulnerability that can add an administrator account in Gleez CMS NUMBERTAG ia PATHTAG. There are CSRF vulnerabilities in Subrion CMS NUMBERTAG through NUMBERTAG and before NUMBERTAG because of a logic error. Although there is functionality to detect CSRF, it is called too late in the FILETAG code, allowing (for example) an attack against the query parameter to panel/database. APITAG NUMBERTAG has PATHTAG CSRF.",
    "CWE-74": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'). The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. Read Application Data. Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Alter Execution Logic. Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code. Other. Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Hide Activities. Often the actions performed by injected control code are unlogged. Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. Failure to Sanitize Special Elements into a Different Plane (Special Element Injection). The software does not adequately filter user-controlled input for special elements with control implications. Modify Application Data. Execute Unauthorized Code or Commands. null. Improper Neutralization of Special Elements used in a Command ('Command Injection'). The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. Execute Unauthorized Code or Commands. If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed. Command injection vulnerabilities typically occur when: 1. Data enters the application from an untrusted source. 2. The data is part of a string that is executed as a command by the application. 3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. Command injection is a common problem with wrapper programs. Improper Control of Resource Identifiers ('Resource Injection'). The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control. Read Application Data. Modify Application Data. Read Files or Directories. Modify Files or Directories. An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information. A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources. Improper Neutralization of Special Elements in Data Query Logic. The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query. Bypass Protection Mechanism. Read Application Data. Modify Application Data. Varies by Context. Depending on the capabilities of the query language, an attacker could inject additional logic into the query to: Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated Append additional commands to the query Return more entities than intended Return fewer entities than intended Cause entities to be sorted in an unexpected way The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges. While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and NoSQL languages. Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Improper Encoding or Escaping of Output. The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. Modify Application Data. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Execute Unauthorized Code or Commands. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Bypass Protection Mechanism. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, GET /index.html HTTP/1.1 is a structured message containing a command (GET) with a single argument (/index.html) and metadata about which protocol version is being used (HTTP/1.1). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly. Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Bypass Protection Mechanism. Read Application Data. The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also. Execute Unauthorized Code or Commands. In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. XML Injection (aka Blind XPath Injection). The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. Execute Unauthorized Code or Commands. Read Application Data. Modify Application Data. Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax. Improper Neutralization of CRLF Sequences ('CRLF Injection'). The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs. Modify Application Data. null. Improper Control of Generation of Code ('Code Injection'). The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Gain Privileges or Assume Identity. Injected code can access resources that the attacker is directly prevented from accessing. Execute Unauthorized Code or Commands. Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code. Hide Activities. Often the actions performed by injected control code are unlogged. When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. Improper Neutralization of Formula Elements in a CSV File. The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software. Read Application Data. Execute Unauthorized Code or Commands. LIKELIHOOD. Low. Current versions of Excel warn users of untrusted content. User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software. esigate.org esigate version NUMBERTAG and earlier contains a CVETAG : Improper Neutralization of Special Elements in Output Used by a Downstream Component APITAG vulnerability in ESI directive with user specified XSLT that can result in Remote Code Execution. This attack appear to be exploitable via Use of another weakness in backend application to reflect ESI directives. This vulnerability appears to have been fixed in NUMBERTAG. APITAG through NUMBERTAG allows arbitrary code execution during a JSON format operation, as demonstrated by the APITAG input. Log Injection exists in APITAG through NUMBERTAG as an attacker can entice the victim to visit a specially crafted link, which in turn will inject a custom Log message provided by the attacker in the 'log' view page, as demonstrated by the APITAG value. The Chartkick gem through NUMBERTAG for Ruby allows Cascading Style Sheets (CSS) Injection (without attribute). APITAG NUMBERTAG allows an unauthenticated attacker to retrieve files from the APITAG web root. This may include backups or LDAP debug files.",
    "CWE-94": "Improper Control of Generation of Code ('Code Injection'). The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Gain Privileges or Assume Identity. Injected code can access resources that the attacker is directly prevented from accessing. Execute Unauthorized Code or Commands. Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code. Hide Activities. Often the actions performed by injected control code are unlogged. When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'). The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template. Read Files or Directories. Read Application Data. The injected code could access restricted data / files. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Gain Privileges or Assume Identity. Injected code can access resources that the attacker is directly prevented from accessing. Execute Unauthorized Code or Commands. Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code. Hide Activities. Often the actions performed by injected control code are unlogged. null. Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'). The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval). Read Files or Directories. Read Application Data. The injected code could access restricted data / files. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Gain Privileges or Assume Identity. Injected code can access resources that the attacker is directly prevented from accessing. Execute Unauthorized Code or Commands. Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code. Hide Activities. Often the actions performed by injected control code are unlogged. This may allow an attacker to execute arbitrary code, or at least modify what code can be executed. Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. DISPUTED Twig before NUMBERTAG allows Server Side Template Injection (SSTI) via the search search_key parameter. NOTE: the vendor points out that Twig itself is not a web application and states that it is the responsibility of web applications using Twig to properly wrap input to it. PATHTAG in Eve (aka pyeve) before NUMBERTAG allows remote attackers to execute arbitrary code via Code Injection in the where parameter. DISPUTED An issue was discovered in the FILETAG component NUMBERTAG for Asuswrt Merlin devices. An attacker can execute arbitrary commands because FILETAG has an eval call, as demonstrated by the APITAG URI. NOTE: the vendor indicates that FILETAG is designed only for use on a trusted intranet network, and intentionally allows remote code execution. Go before NUMBERTAG and NUMBERTAG before NUMBERTAG allows Code Injection. APITAG in Simple Machines Forum (SMF NUMBERTAG allows remote attackers to conduct PHP object injection attacks and execute arbitrary PHP code via vectors related to variables derived from user input in a foreach loop.",
    "CWE-369": "Divide By Zero. The product divides a value by zero. DoS. Crash, Exit, or Restart. A Divide by Zero results in a crash. This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height. Division by zero vulnerabilities in the functions pi_next_pcrl, pi_next_cprl, and pi_next_rpcl in PATHTAG in APITAG through NUMBERTAG allow remote attackers to cause a denial of service (application crash). The quantum handling code in APITAG allows remote attackers to cause a denial of service (divide by zero error or out of bounds write) via a crafted file. In aubio NUMBERTAG a divide by zero error exists in the function APITAG in source_wavread.c, which may lead to APITAG when playing a crafted audio file. The APITAG function in libzpaq/libzpaq.h in liblrzip.so in lrzip NUMBERTAG allows remote attackers to cause a denial of service (divide by zero error and application crash) via a crafted archive. Divide by zero vulnerability in the opj_tcd_init_tile function in tcd.c in APITAG before NUMBERTAG allows remote attackers to cause a denial of service (application crash) via a crafted jp2 file. NOTE: this issue exists because of an incorrect fix for CVETAG .",
    "CWE-119": "Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service. Modify Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections. Out-of-bounds Read. The software reads data past the end, or before the beginning, of the intended buffer. Read Memory. Bypass Protection Mechanism. By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results. Return of Pointer Value Outside of Expected Range. A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference. Read Memory. Modify Memory. null. Access of Memory Location Before Start of Buffer. The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. Read Memory. For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Modify Memory. DoS. Crash, Exit, or Restart. Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Modify Memory. Execute Unauthorized Code or Commands. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. Out-of-bounds Write. The software writes data past the end, or before the beginning, of the intended buffer. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Typically, this can result in corruption of data, a crash, or code execution. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results. Access of Memory Location After End of Buffer. The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer. Read Memory. For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Modify Memory. DoS. Crash, Exit, or Restart. Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Modify Memory. Execute Unauthorized Code or Commands. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. This typically occurs when a pointer or its index is decremented to a position before the buffer; when pointer arithmetic results in a position before the buffer; or when a negative index is used, which generates a position before the buffer. Buffer Access with Incorrect Length Value. The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer. Read Memory. Modify Memory. Execute Unauthorized Code or Commands. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service. Modify Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. When the length value exceeds the size of the destination, a buffer overflow could occur. Untrusted Pointer Dereference. The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between userland and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment. Use of Out-of-range Pointer Offset. The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution. Access of Uninitialized Pointer. The program accesses or uses a pointer that has not been initialized. Read Memory. If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed. Expired Pointer Dereference. The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid. Read Memory. If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application. DoS. Crash, Exit, or Restart. If the expired pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution. Wrap-around Error. Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. Incorrect Calculation of Buffer Size. The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data. null. Integer Overflow or Wraparound. The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc. Off-by-one Error. A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. Numeric Range Comparison Without Minimum Check. The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum. Modify Application Data. Execute Unauthorized Code or Commands. An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands. DoS. Resource Consumption (Other). in some contexts, a negative value could lead to resource consumption. Modify Memory. Read Memory. If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer. Some programs use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption. The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account. Access of Resource Using Incompatible Type ('Type Confusion'). The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type. Read Memory. Modify Memory. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution. When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues. Improper Access Control Applied to Mirrored or Aliased Memory Regions. Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region. Read Memory. LIKELIHOOD. High. Modify Memory. LIKELIHOOD. High. DoS. Instability. LIKELIHOOD. High. Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes. Improper Handling of Overlap Between Protected Memory Ranges. The product allows address regions to overlap, which can result in the bypassing of intended memory protection. Modify Memory. Read Memory. DoS. Instability. LIKELIHOOD. High. Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower privilege software to read or write into the protected memory region resulting in privilege escalation attack. Address overlap weakness can also be used to launch a denial of service attack on the higher privilege software memory regions. Integer Overflow to Buffer Overflow. The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. null. Improper Validation of Array Index. The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array. DoS. Crash, Exit, or Restart. Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area. Modify Memory. If the memory corrupted is data, rather than instructions, the system will continue to function with improper values. Modify Memory. Read Memory. Use of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., buffer overflows are not always the result. This may result in the exposure or modification of sensitive data. Execute Unauthorized Code or Commands. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution. null. Signed to Unsigned Conversion Error. The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. Unexpected State. Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities. It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program. Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition. An off by one error was discovered in APITAG in PATHTAG in APITAG NUMBERTAG The vulnerability causes an out of bounds write, which may lead to remote denial of service (heap based buffer overflow affecting opj_mqc_flush in PATHTAG and opj_t1_encode_cblk in PATHTAG ) or possibly remote code execution. In PATHTAG the length of buffer APITAG _src is small than expected, which will cause copy buffer overflow later. If the image is from remote, may lead to remote code execution or denial of service. This affects Openc NUMBERTAG and earlier. Rust Programming Language Rust standard library version Commit APITAG and later; stable release NUMBERTAG and later contains a Buffer Overflow vulnerability in APITAG function that can result in Arbitrary code execution, but no proof of concept exploit is currently published.. This vulnerability appears to have been fixed in after commit APITAG stable release NUMBERTAG and later. APITAG NUMBERTAG is vulnerable to a heap based buffer overflow in readcffset (parsettf.c) resulting in APITAG or code execution via a crafted otf file. Stack consumption vulnerability in the APITAG function in gd.c in the GD Graphics Library (aka libgd) before NUMBERTAG as used in PHP before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote attackers to cause a denial of service (segmentation violation) via a crafted imagefilltoborder call that triggers use of a negative color value.",
    "CWE-125": "Out-of-bounds Read. The software reads data past the end, or before the beginning, of the intended buffer. Read Memory. Bypass Protection Mechanism. By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results. Untrusted Pointer Dereference. The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between userland and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment. Use of Out-of-range Pointer Offset. The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution. Access of Uninitialized Pointer. The program accesses or uses a pointer that has not been initialized. Read Memory. If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed. Expired Pointer Dereference. The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid. Read Memory. If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application. DoS. Crash, Exit, or Restart. If the expired pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution. Buffer Over-read. The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. Read Memory. Bypass Protection Mechanism. By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service. This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash. Buffer Under-read. The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. Read Memory. Bypass Protection Mechanism. By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service. This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash. An issue was discovered in APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG There is an out of bounds read/write in the function APITAG in PATHTAG which leads to denial of service. An issue was discovered in image_save_png in image/image png.cpp in Free Lossless Image Format (FLIF NUMBERTAG Attackers can trigger a heap based buffer over read in libpng via a crafted flif file. In APITAG through NUMBERTAG there is a stack based buffer over read via a long User Agent header. Ming (aka libming NUMBERTAG has a heap based buffer over read in the function APITAG in decompile.c. APITAG NUMBERTAG has an out of bounds (OOB) read vulnerability in mod_cap via the cap_text.c cap_to_text function.",
    "CWE-20": "Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Insufficient Verification of Data Authenticity. The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data. Varies by Context. Unexpected State. null. Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'). The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. Read Application Data. Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Alter Execution Logic. Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code. Other. Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Hide Activities. Often the actions performed by injected control code are unlogged. Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Incorrect Behavior Order: Early Validation. The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification. Bypass Protection Mechanism. Execute Unauthorized Code or Commands. An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior. Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing. Improper Use of Validation Framework. The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library. Unexpected State. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework. Improper Validation of Specified Quantity in Input. The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties. Varies by Context. Since quantities are used so often to affect resource allocation or process financial data, they are often present in many places in the code. Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc. Improper Validation of Specified Index, Position, or Offset in Input. The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties. Varies by Context. Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. Improper Validation of Syntactic Correctness of Input. The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax. Varies by Context. Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax. Improper Validation of Specified Type of Input. The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type. Varies by Context. When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type. Improper Validation of Consistency within Input. The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent. Varies by Context. Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities. Improper Validation of Unsafe Equivalence in Input. The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value. Varies by Context. Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no <script> tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could injest <ScrIpT> and trigger XSS. Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. Improper Resolution of Path Equivalence. The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object. Read Files or Directories. Modify Files or Directories. Bypass Protection Mechanism. An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism. Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object. Allocation of Resources Without Limits or Throttling. The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource. Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service. Improper Validation of Function Hook Arguments. The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities. Unexpected State. Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself. APITAG NUMBERTAG a and older uses $_SERVER[HTTP_HOST] instead of the baseurl setting as part of the password reset URL. This can lead to phishing attacks. (A remote unauthenticated attacker can change the URL's hostname via the HTTP Host header.) The vulnerability can be triggered only if the Host header is not part of the web server routing process (e.g., if several domains are served by the same web server). Zim through NUMBERTAG creates temporary directories with predictable names. A malicious user could predict and create Zim's temporary directories and prevent other users from being able to start Zim, resulting in a denial of service. In APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG the APITAG function in coders/jp2.c does not properly validate the channel geometry, leading to a crash. An issue was discovered in APITAG through NUMBERTAG It allows attackers to gain privileges by uploading an image file with contents that represent an admin session, and then sending a Cookie: header with a mindoc_id value containing the relative pathname of this uploaded file. For example, the mindoc_id (aka session ID) could be of the form PATHTAG .jpg where ' ' is a hex value displayed in the upload field of a PATHTAG screen. Improper input validation in Kubernetes CSI sidecar containers for external provisioner APITAG APITAG NUMBERTAG APITAG APITAG external snapshotter APITAG APITAG NUMBERTAG and external resizer NUMBERTAG could result in unauthorized APITAG data access or volume mutation during snapshot, restore from snapshot, cloning and resizing operations.",
    "CWE-674": "Uncontrolled Recursion. The product does not properly control the amount of recursion which takes place, consuming excessive resources, such as allocated memory or the program stack. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash. Read Application Data. In some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path. null. Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'). The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities. DoS. Resource Consumption (Other). If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources. If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service. The parsing component in APITAG through NUMBERTAG allows attackers to cause a denial of service (uncontrolled recursion in APITAG in APITAG. Oniguruma before NUMBERTAG allows Stack Exhaustion in regcomp.c because of recursion in regparse.c. libyara/re.c in the regexp module in YARA NUMBERTAG allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function. In QPDF NUMBERTAG in APITAG APITAG and APITAG have recursive calls for a long time, which allows remote attackers to cause a denial of service via a crafted PDF file. An issue was discovered in the function mark_beginning_as_normal in nfa.c in fle NUMBERTAG There is a stack exhaustion problem caused by the mark_beginning_as_normal function making recursive calls to itself in certain scenarios involving lots of ' ' characters. Remote attackers could leverage this vulnerability to cause a denial of service.",
    "CWE-400": "Uncontrolled Resource Consumption. The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). The most common result of resource exhaustion is denial of service. The software may slow down, crash due to unhandled errors, or lock out legitimate users. Bypass Protection Mechanism. Other. In some cases it may be possible to force the software to fail open in the event of resource exhaustion. The state of the software -- and possibly the security functionality - may then be compromised. Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system. There are at least three distinct scenarios which can commonly lead to resource exhaustion: Lack of throttling for the number of allocated resources Losing all references to a resource before reaching the shutdown stage Not closing/returning a resource after processing Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource. Allocation of Resources Without Limits or Throttling. The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource. Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service. Missing Reference to Active Allocated Resource. The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. DoS. Resource Consumption (Other). An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource. This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed. Logging of Excessive Data. The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Other). Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system. Hide Activities. Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack. Hide Activities. If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise. While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment. Improper Restriction of Power Consumption. The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes. DoS. Resource Consumption (Other). DoS. Crash, Exit, or Restart. The power source could be drained, causing the application - and the entire device - to cease functioning. In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the software itself, and the device might not always be directly attached to a reliable power source. If the software uses too much power too quickly, then this could cause the device (and subsequently, the software) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs. Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone USB interface. Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations. The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). Reduce Performance. LIKELIHOOD. Low. Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues. Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner. However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support impedance mismatch between reference types and primitives. Insufficient Resource Pool. The software's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources. DoS. Crash, Exit, or Restart. Other. Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool. Frequently the consequence is a flood of connection or sessions. The string module is a module that provides extra string operations. The string module is vulnerable to regular expression denial of service when specifically crafted untrusted user input is passed into the underscore or APITAG methods. Memory leak in APITAG in APITAG APITAG NUMBERTAG. The APITAG function in coders/png.c in APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote attackers to cause a denial of service (large loop and CPU consumption) via a crafted file. The timespan module is vulnerable to regular expression denial of service. Given NUMBERTAG k characters of untrusted user input it will block the event loop for around NUMBERTAG seconds. Lightbend Spray spray json through NUMBERTAG allows remote attackers to cause a denial of service (resource consumption) because of Algorithmic Complexity during the parsing of many JSON object fields (with keys that have the same hash code).",
    "CWE-772": "Missing Release of Resource after Effective Lifetime. The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. DoS. Resource Consumption (Other). An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource. When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc. Use of Object without Invoking Destructor Method. The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method. Reduce Performance. This issue can make the software perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. Improper Update of Reference Count. The software uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count. Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released. Missing Release of Memory after Effective Lifetime. The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. DoS. Crash, Exit, or Restart. DoS. Instability. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition. Reduce Performance. This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release. Missing Release of File Descriptor or Handle after Effective Lifetime. The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed. DoS. Resource Consumption (Other). An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource. When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles. In APITAG NUMBERTAG the APITAG function in sun.c allows attackers to cause a denial of service (memory leak) via a crafted file. In APITAG NUMBERTAG the APITAG function in palm.c allows attackers to cause a denial of service (memory leak) via a crafted file. In APITAG NUMBERTAG a memory leak vulnerability was found in the function APITAG in coders/mvg.c, which allows attackers to cause a denial of service, related to the function APITAG in svg.c. The APITAG function in coders/mat.c in APITAG through NUMBERTAG and NUMBERTAG through NUMBERTAG has memory leaks involving the quantum_info and clone_info data structures. An issue was discovered in APITAG NUMBERTAG A memory leak vulnerability was found in the function APITAG in coders/gif.c, which allow remote attackers to cause a denial of service via a crafted file.",
    "CWE-416": "Signal Handler Race Condition. The software uses a signal handler that introduces a race condition. Modify Application Data. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data. Gain Privileges or Assume Identity. If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe. Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity). Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service. Modify Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections. Write-what-where Condition. Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. DoS. Crash, Exit, or Restart. Modify Memory. Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls. During execution of non-reentrant code, the software performs a call that unintentionally produces a nested invocation of the non-reentrant code. Unexpected State. LIKELIHOOD. Unknown. Exploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution. In complex software, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently of concern in software that executes script from untrusted sources. Examples of such software are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call. Use After Free. Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. Modify Memory. The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere. DoS. Crash, Exit, or Restart. If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information. Execute Unauthorized Code or Commands. If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code. The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved. Double Free. The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. Modify Memory. Execute Unauthorized Code or Commands. Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code. When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack. In Long Range Zip (aka lrzip NUMBERTAG there is a use after free in the ucompthread function (stream.c). Remote attackers could leverage this vulnerability to cause a denial of service via a crafted lrz file. An issue was discovered in GPAC version NUMBERTAG and NUMBERTAG development NUMBERTAG There is a use after free in the function APITAG in isomedia/box_code_base.c. The get_relocs NUMBERTAG function in PATHTAG in radare NUMBERTAG allows remote attackers to cause a denial of service (use after free and application crash) via a crafted Mach0 file. The cmd_info function in PATHTAG in radare NUMBERTAG allows remote attackers to cause a denial of service (use after free and application crash) via a crafted binary file. The DBD::mysql module through NUMBERTAG for Perl allows remote attackers to cause a denial of service (use after free and application crash) or possibly have unspecified other impact by triggering NUMBERTAG certain error responses from a APITAG server or NUMBERTAG a loss of a network connection to a APITAG server. The use after free defect was introduced by relying on incorrect Oracle mysql_stmt_close documentation and code examples.",
    "CWE-834": "Excessive Iteration. The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Amplification. DoS. Crash, Exit, or Restart. Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error. If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the software or its host system; it depends on the amount of resources consumed per iteration. Loop with Unreachable Exit Condition ('Infinite Loop'). The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Amplification. An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. Use of Blocking Code in Single-threaded, Non-blocking Context. The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked. DoS. Resource Consumption (CPU). An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely. When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation. Due to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code. Unchecked Input for Loop Condition. The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. DoS. Resource Consumption (CPU). null. The APITAG function in coders\\dpx.c in APITAG NUMBERTAG has a large loop vulnerability that can cause CPU exhaustion via a crafted DPX file, related to lack of an EOF check. In coders/xbm.c in APITAG NUMBERTAG Q NUMBERTAG a APITAG in APITAG due to lack of an EOF APITAG of File) check might cause huge CPU consumption. When a crafted XBM file, which claims large rows and columns fields in the header but does not contain sufficient backing data, is provided, the loop over the rows would consume huge CPU resources, since there is no EOF check inside the loop. APITAG NUMBERTAG has a large loop vulnerability in the APITAG function in coders\\pwp.c. An issue was discovered in Free Lossless Image Format (FLIF NUMBERTAG An attacker can trigger a long loop in image_load_pnm in image/image APITAG. APITAG NUMBERTAG Q NUMBERTAG has excessive iteration in the APITAG and APITAG functions (coders/tiff.c), which results in a hang (tens of minutes) with a tiny APITAG file. Remote attackers could leverage this vulnerability to cause a denial of service via a crafted tiff file.",
    "CWE-415": "Write-what-where Condition. Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. DoS. Crash, Exit, or Restart. Modify Memory. Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. Signal Handler Race Condition. The software uses a signal handler that introduces a race condition. Modify Application Data. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data. Gain Privileges or Assume Identity. If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe. Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity). Double Free. The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. Modify Memory. Execute Unauthorized Code or Commands. Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code. When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack. Use After Free. Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. Modify Memory. The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere. DoS. Crash, Exit, or Restart. If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information. Execute Unauthorized Code or Commands. If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code. The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved. Dave Gamble cJSON version NUMBERTAG and earlier contains a CVETAG : Double Free vulnerability in cJSON library that can result in Possible crash or RCE. This attack appear to be exploitable via Attacker must be able to force victim to print JSON data, depending on how cJSON library is used this could be either local or over a network. This vulnerability appears to have been fixed in NUMBERTAG. Double free vulnerability in the APITAG function in libgd2 before NUMBERTAG allows remote attackers to cause a denial of service via vectors related to a palette with no colors. A double free bug in the read_gif function in gifread.c in gifsicle NUMBERTAG allows a remote attacker to cause a denial of service attack or unspecified other impact via a maliciously crafted file, because last_name is mishandled, a different vulnerability than CVETAG . jpegoptim.c in jpegoptim NUMBERTAG fixed in NUMBERTAG has an invalid use of APITAG and APITAG which allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact. An issue was discovered in APITAG NUMBERTAG A double free in load_bmp in APITAG occurs when loading a crafted bmp image.",
    "CWE-269": "Improper Privilege Management. The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. Gain Privileges or Assume Identity. null. Privilege Dropping / Lowering Errors. The software does not drop privileges before passing control of a resource to an actor that does not have those privileges. Gain Privileges or Assume Identity. If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped. Gain Privileges or Assume Identity. Hide Activities. If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator. In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker. Execution with Unnecessary Privileges. The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. Read Application Data. DoS. Crash, Exit, or Restart. An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data. New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges. Incorrect Privilege Assignment. A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor. Gain Privileges or Assume Identity. A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts. null. Privilege Defined With Unsafe Actions. A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity. Gain Privileges or Assume Identity. A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts. null. Privilege Chaining. Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination. Gain Privileges or Assume Identity. A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user. null. Privilege Context Switching Error. The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control. Gain Privileges or Assume Identity. A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users. null. Improper Handling of Insufficient Privileges. The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses. Other. Alter Execution Logic. null. Incorrect Use of Privileged APIs. The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly. Gain Privileges or Assume Identity. An attacker may be able to elevate privileges. Read Application Data. An attacker may be able to obtain sensitive information. Execute Unauthorized Code or Commands. An attacker may be able to execute code. When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited. I, Librarian version NUMBERTAG and earlier contains an Incorrect Access Control vulnerability in FILETAG that can result in any users gaining unauthorized access (read, write and delete) to project discussions. main.c in Tinyproxy NUMBERTAG and earlier creates a PATHTAG file after dropping privileges to a non root account, which might allow local users to kill arbitrary processes by leveraging access to this non root account for tinyproxy.pid modification before a root script executes a \"kill APITAG \" command. Sympa through NUMBERTAG b NUMBERTAG allows a local privilege escalation from the sympa user account to full root access by modifying the APITAG configuration file (which is owned by sympa) and parsing it through the setuid sympa_newaliases wrapper executable. Kata Containers doesn't restrict containers from accessing the guest's root filesystem device. Malicious containers can exploit this to gain code execution on the guest and masquerade as the kata agent. This issue affects Kata Containers NUMBERTAG ersions earlier than NUMBERTAG Kata Containers NUMBERTAG ersions earlier than NUMBERTAG and Kata Containers NUMBERTAG and earlier versions. Subrion NUMBERTAG is vulnerable to Improper Access control because user groups not having access to the Admin panel are able to access it (but not perform actions) if the Guests user group has access to the Admin panel.",
    "NVD-CWE-noinfo": "It was found that ceph isci cli package as shipped by Red Hat Ceph Storage NUMBERTAG and NUMBERTAG is using python werkzeug in debug shell mode. This is done by setting APITAG in file PATHTAG provided by ceph isci cli package. This allows unauthenticated attackers to access this debug shell and escalate privileges. Once an attacker has successfully connected to this debug shell they will be able to execute arbitrary commands remotely. These commands will run with the same privileges as of user executing the application which is using python werkzeug with debug shell mode enabled. In Red Hat Ceph Storage NUMBERTAG and NUMBERTAG ceph isci cli package runs python werkzeug library with root level permissions. An issue has been found in libwav through NUMBERTAG It is a SEGV in the function wav_free in libwav.c. radare NUMBERTAG misparses signature information in PE files, causing a segmentation fault in APITAG in PATHTAG This is due to a malformed object identifier in APITAG. In APITAG NUMBERTAG there is a bus error caused by loading of a misaligned address in the zzip_disk_findfirst function of zzip/mmapped.c. Remote attackers could leverage this vulnerability to cause a denial of service via a crafted zip file. In the marshmallow library before NUMBERTAG and NUMBERTAG before NUMBERTAG b9 for Python, the schema \"only\" option treats an empty list as implying no \"only\" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the \"only\" option, and there is a user role that produces an empty value for \"only\"). An exploitable vulnerability exists in the YAML parsing functionality in config.py in Confire NUMBERTAG Due to the user specific configuration being loaded from APITAG using the APITAG function, a YAML parser can execute arbitrary Python commands resulting in command execution. An attacker can insert Python into loaded YAML to trigger this vulnerability. The makandra consul gem through NUMBERTAG for Ruby has Incorrect Access Control. Rancher Labs rancher server NUMBERTAG is vulnerable to authenticated users disabling access control via an API call. This is fixed in versions APITAG APITAG APITAG and APITAG. In Kubernetes versions NUMBERTAG and NUMBERTAG user input was handled insecurely while setting up volume mounts on Windows nodes, which could lead to command line argument injection. sodiumoxide NUMBERTAG and older APITAG vulnerable to degenerate public keys. jiacrontab NUMBERTAG allows remote attackers to execute arbitrary commands via the PATHTAG command and args parameters, as demonstrated by PATHTAG in the POST data. Elixir's vim plugin, alchemist.vim is vulnerable to remote code execution in the bundled alchemist server. A malicious website can execute requests against an ephemeral port on localhost that are then evaluated as elixir code. A safety violation was discovered in the rgb crate before NUMBERTAG for Rust, leading to (for example) dereferencing of arbitrary pointers or disclosure of uninitialized memory. This occurs because structs can be treated as bytes for read and write operations. _get_flag_ip_localdb in PATHTAG in Modern Honey Network (MHN) through NUMBERTAG allows attackers to cause a denial of service via an IP address that is absent from a local geolocation database, because the code tries to uppercase a return value even if that value is not a string. APITAG NUMBERTAG allows remote attackers to cause a denial of service (application hang) via an attempted conversion to the jp2 format.",
    "CWE-863": "Incorrect Authorization. The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions. Read Application Data. Read Files or Directories. An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data. Modify Application Data. Modify Files or Directories. An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data. Gain Privileges or Assume Identity. Bypass Protection Mechanism. An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. Incorrect Behavior Order: Authorization Before Parsing and Canonicalization. If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection. Bypass Protection Mechanism. For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed. Authorization Bypass Through User-Controlled Key. The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. Bypass Protection Mechanism. Access control checks for specific user data or functionality can be bypassed. Gain Privileges or Assume Identity. Horizontal escalation of privilege is possible (one user can view/modify information of another user). Gain Privileges or Assume Identity. Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access. Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data. Guessable CAPTCHA. The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor. Bypass Protection Mechanism. Other. When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA. An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated that with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA. Exposed Chip Debug and Test Interface With Insufficient or Missing Authorization. The chip does not implement or does not correctly check whether users are authorized to access internal registers. Read Application Data. LIKELIHOOD. High. Read Memory. LIKELIHOOD. High. Execute Unauthorized Code or Commands. LIKELIHOOD. High. Modify Memory. LIKELIHOOD. High. Modify Application Data. LIKELIHOOD. High. Bypass Protection Mechanism. LIKELIHOOD. High. A device's internal information may be accessed through a scan chain of interconnected internal registers usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If this control is not implemented or not implemented properly a user may be able to bypass on-chip protection mechanisms through debug interface. Use of Non-Canonical URL Paths for Authorization Decisions. The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization. Bypass Protection Mechanism. An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL. Read Files or Directories. If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program). If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as: http://WWW.EXAMPLE.COM/mypage http://www.example.com/%6Dypage (alternate encoding) http://192.168.1.1/mypage (IP address) http://www.example.com/mypage/ (trailing /) http://www.example.com:80/mypage Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule). The Kubernetes kube apiserver mistakenly allows access to a cluster scoped custom resource if the request is made as if the resource were namespaced. Authorizations for the resource accessed in this manner are enforced using roles and role bindings within the namespace, meaning that a user with access only to a resource in one namespace could create, view update or delete the cluster scoped resource (according to their namespace role privileges). Kubernetes affected versions include versions prior to NUMBERTAG ersions prior to NUMBERTAG ersions prior to NUMBERTAG and versions NUMBERTAG. In Odoo NUMBERTAG Odoo Community Edition NUMBERTAG and NUMBERTAG and Odoo Enterprise Edition NUMBERTAG and NUMBERTAG incorrect access control on APITAG tokens in the APITAG module allows remote authenticated users to hijack APITAG sessions of other users. Improper authorization in aedes version NUMBERTAG will publish a LWT in a channel when a client is not authorized. Improper access control in the Helpdesk App of Odoo Enterprise NUMBERTAG through NUMBERTAG allows remote authenticated attackers to obtain elevated privileges via a crafted request. zrlog NUMBERTAG has a vulnerability with the permission check. If admin account is logged in, other unauthorized users can download the database backup file directly.",
    "CWE-732": "Incorrect Permission Assignment for Critical Resource. The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. Read Application Data. Read Files or Directories. An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file. Gain Privileges or Assume Identity. An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse. Modify Application Data. Other. An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database. When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data. Incorrect Default Permissions. During installation, installed file permissions are set to allow anyone to modify those files. Read Application Data. Modify Application Data. null. Improper Preservation of Permissions. The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended. Read Application Data. Modify Application Data. null. Insecure Inherited Permissions. A product defines a set of insecure permissions that are inherited by objects that are created by the program. Read Application Data. Modify Application Data. null. Insecure Preserved Inherited Permissions. A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement. Read Application Data. Modify Application Data. null. Incorrect Execution-Assigned Permissions. While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user. Read Application Data. Modify Application Data. null. Sensitive Cookie Without 'HttpOnly' Flag. The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag. Read Application Data. If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties. Gain Privileges or Assume Identity. If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user. The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS. UNIX Symbolic Link (Symlink) Following. The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access. Permission Race Condition During Resource Copy. The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place. Read Application Data. Modify Application Data. null. The module description renderer in Odoo Community NUMBERTAG and earlier and Odoo Enterprise NUMBERTAG and earlier does not disable RST's local file inclusion, which allows privileged authenticated users to read local files via a crafted module description. In Flatpak before NUMBERTAG a third party app repository could include malicious apps that contain files with inappropriate permissions, for example setuid or world writable. The files are deployed with those permissions, which would let a local attacker run the setuid executable or write to the world writable location. In the case of the \"system helper\" component, files deployed as part of the app are owned by root, so in the worst case they could be setuid root. APITAG lh ehr version REL NUMBERTAG contains a Authenticated Unrestricted File Write in FILETAG NUMBERTAG ulnerability in Patient file letter functions that can result in Write files with malicious content and may lead to remote code execution. This attack appear to be exploitable via User controlled input. PATHTAG in Icinga NUMBERTAG through NUMBERTAG has a chown call for a filename in a user writable directory, which allows local users to gain privileges by leveraging access to the $ICINGA2_USER account for creation of a link. Incorrect access control in the APITAG framework in Odoo Community NUMBERTAG and earlier and Odoo Enterprise NUMBERTAG and earlier allows authenticated attackers to access data in transient records that they do not own by making an RPC call before garbage collection occurs.",
    "CWE-284": "Improper Access Control. The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. Varies by Context. Access control involves the use of several protection mechanisms such as: Authentication (proving the identity of an actor) Authorization (ensuring that a given actor can access a resource), and Accountability (tracking of activities that were performed) When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses: Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies. Improper Privilege Management. The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. Gain Privileges or Assume Identity. null. Improper Ownership Management. The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource. Gain Privileges or Assume Identity. null. Improper Authorization. The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action. Read Application Data. Read Files or Directories. An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data. Modify Application Data. Modify Files or Directories. An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data. Gain Privileges or Assume Identity. An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. Incorrect User Management. The software does not properly manage a user within its environment. Varies by Context. Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects. Improper Authentication. When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. Read Application Data. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. null. Improper Restriction of Communication Channel to Intended Endpoints. The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint. Gain Privileges or Assume Identity. If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint. Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint. While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness. Improper Physical Access Control. The product is to be designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor's ability to access these areas. Varies by Context. Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product. Insecure Security Identifier Mechanism. The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented. Modify Memory. Read Memory. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Quality Degradation. LIKELIHOOD. High. Systems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges. A broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc. Origin Validation Error. The software does not properly verify that the source of data or communication is valid. Gain Privileges or Assume Identity. Varies by Context. An attacker can access any functionality that is inadvertently accessible to the source. null. Insufficient Granularity of Access Control. The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets. Modify Memory. Read Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Other. LIKELIHOOD. High. Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration. Improper Restriction of Write-Once Bit Fields. The hardware design control register sticky bits or write-once bit fields are improperly implemented, such that they can be reprogrammed by software. Varies by Context. System configuration cannot be programmed in a secure way. Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or sticky. This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value 1, wherein they would work as write-1-once and not write-once. Improper Implementation of Lock Protection Registers. The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set. Modify Memory. LIKELIHOOD. High. Registers protected by lock bit can be modified even when lock is set. In integrated circuits and hardware IPs, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after being set to unlock the system. Inclusion of Undocumented Features or Chicken Bits. The device includes chicken bits or undocumented features that can create entry points for unauthorized actors. Modify Memory. Read Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as chicken bits. They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access. CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations. The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory. Execute Unauthorized Code or Commands. CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it. Hardware Features Enable Physical Attacks from Software. Software-controllable device functionality such as power and clock management permits unauthorized modification of memory or register bits. Modify Memory. Modify Application Data. Bypass Protection Mechanism. Fault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Techniques employed to flip bits include low-cost methods such as manipulation of the device clock and voltage supply as well as high-cost but more precise techniques involving lasers. To inject faults a physical access requirement is frequently assumed to be necessary. This assumption may be false if the device has improperly secured power management features that allow untrusted programs to manipulate the device clock frequency or operating voltage. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency are common features in today\u2019s chipsets and can be exploited by attackers if protections are not in place. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software can result in bit flips in other memory locations (Rowhammer). Improper Access Control Applied to Mirrored or Aliased Memory Regions. Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region. Read Memory. LIKELIHOOD. High. Modify Memory. LIKELIHOOD. High. DoS. Instability. LIKELIHOOD. High. Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes. Improper Restriction of Security Token Assignment. The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected. Modify Files or Directories. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Modify Memory. Modify Memory. DoS. Crash, Exit, or Restart. LIKELIHOOD. High. Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintanence of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent. Improper Handling of Overlap Between Protected Memory Ranges. The product allows address regions to overlap, which can result in the bypassing of intended memory protection. Modify Memory. Read Memory. DoS. Instability. LIKELIHOOD. High. Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower privilege software to read or write into the protected memory region resulting in privilege escalation attack. Address overlap weakness can also be used to launch a denial of service attack on the higher privilege software memory regions. Register Interface Allows Software Access to Sensitive Data or Security Settings. Memory-mapped registers provide access to hardware functionality from software and if not properly secured can result in loss of confidentiality and integrity. Read Memory. Read Application Data. Modify Memory. Modify Application Data. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Unexpected State. Alter Execution Logic. Confidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections. Software commonly accesses peripherals in an SoC through a memory-mapped register interface. Any security-critical data accessible directly or indirectly through the register interface must have a clearly defined and correctly implemented access control policy to protect assets from malicious software tampering. Policy Uses Obsolete Encoding. The product uses an obsolete encoding mechanism to implement access controls. Modify Memory. Read Memory. Modify Files or Directories. Read Files or Directories. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Reduce Reliability. LIKELIHOOD. High. Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding. Policy Privileges are not Assigned Consistently Between Control and Data Agents. The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies. Modify Memory. Read Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Files or Directories. Reduce Reliability. LIKELIHOOD. High. Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves. Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration. Generation of Incorrect Security Tokens. The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect. Modify Files or Directories. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Read Memory. Modify Memory. DoS. Crash, Exit, or Restart. LIKELIHOOD. High. Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be read, write, program, reset, fetch, compute, etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access. Insufficient Protections on the Volatile Memory Containing Boot Code. The protections on the product's non-volatile memory containing boot code are insufficient to prevent the bypassing of secure boot or the execution of an untrusted, boot code chosen by an adversary. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. LIKELIHOOD. High. As a part of secure-boot process, a System-on-Chip's (SoC) read-only-memory (ROM) code fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM)/static, random-access memory (SRAM). The NVM is usually external to the SoC while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code. If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the excution of an adversary\u2019s code. Hardware Child Block Incorrectly Connected to Parent System. Signals between a hardware IP and the parent system design are incorrectly connected causing security risks. Varies by Context. Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated. Access Control Check Implemented After Asset is Accessed. A product's hardware-based access control check occurs after the asset has been accessed. Modify Memory. Read Memory. Modify Application Data. Read Application Data. Gain Privileges or Assume Identity. Bypass Protection Mechanism. The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised. Mutable Attestation or Measurement Reporting Data. The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary. Read Memory. Read Application Data. A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement. Incorrect Decoding of Security Identifiers. The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset. Modify Memory. Read Memory. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Quality Degradation. LIKELIHOOD. High. In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections. A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent\u2019s security identifier is decoded into a trusted agent\u2019s security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset. Incorrect Conversion of Security Identifiers. The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset. Modify Memory. Read Memory. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Quality Degradation. LIKELIHOOD. High. In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other. A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset. Incorrect Chaining or Granularity of Debug Components. The product's debug components contain incorrect chaining or granularity of debug components. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Execute Unauthorized Code or Commands. Modify Memory. Modify Files or Directories. LIKELIHOOD. Medium. Depending on the access to debug component(s) erroneously granted, an attacker could use the debug component to gain additional understanding about the system to further an attack and/or execute other commands. This could compromise any security property, including the ones listed above. For debugging and troubleshooting a chip, several hardware design elements are often implemented, including: Various Test Access Ports (TAPs) allow boundary scan commands to be executed. For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a stimulus and response mechanism. Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions. Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation. The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation. DoS. Instability. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). Gain Privileges or Assume Identity. Bypass Protection Mechanism. Alter Execution Logic. Quality Degradation. Unexpected State. Reduce Maintainability. Reduce Performance. Reduce Reliability. LIKELIHOOD. High. Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. Improper Translation of Security Attributes by Fabric Bridge. The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another. Modify Memory. Read Memory. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Execute Unauthorized Code or Commands. A bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP. The values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted). A weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service. Missing Protection for Mirrored Regions in On-Chip Fabric Firewall. The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions. Modify Memory. Read Memory. Bypass Protection Mechanism. Few fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data. Hardware Allows Activation of Test or Debug Logic at Runtime. During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary. Modify Memory. Read Memory. DoS. Crash, Exit, or Restart. DoS. Instability. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Alter Execution Logic. Quality Degradation. Unexpected State. Reduce Performance. Reduce Reliability. An adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets. Improper Setting of Bus Controlling Capability in Fabric End-point. The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric. Modify Memory. Read Memory. Bypass Protection Mechanism. To support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security. Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges. The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region. Bypass Protection Mechanism. Read Memory. Modify Memory. LIKELIHOOD. Medium. Various ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected. Occasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege. Missing Security Checks in Fabric Bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master. Similarly, it does not check the hardware identity of the transaction received from the slave interface of the bridge. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Read Memory. Modify Memory. LIKELIHOOD. Medium. In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect. For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge. Improper Protection for Out of Bounds Signal Level Alerts. Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts. DoS. Instability. DoS. Crash, Exit, or Restart. Reduce Reliability. Unexpected State. LIKELIHOOD. High. Hardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms. When device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling. Warning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts. Improper Management of Sensitive Trace Data. Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents. Read Memory. Can read secret values if they are captured in debug traces and stored unsafely. To facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers. Since these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information. Unauthorized Error Injection Can Degrade Hardware Redundancy. An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode. DoS. Crash, Exit, or Restart. DoS. Instability. Quality Degradation. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). Reduce Performance. Reduce Reliability. Unexpected State. To ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack. Permissive Cross-domain Policy with Untrusted Domains. The software uses a cross-domain policy file that includes domains that should not be trusted. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. Varies by Context. An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. A cross-domain policy file (crossdomain.xml in Flash and clientaccesspolicy.xml in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made. Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many cases, the attack can be launched without the victim even being aware of it. Sensitive Cookie with Improper SameSite Attribute. The SameSite attribute for sensitive cookies is not set, or an insecure value is used. Modify Application Data. LIKELIHOOD. Low. If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a simple Content-Type header in the HTTP request and many more. The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens). sociomantic tsunami git hub before NUMBERTAG allows remote attackers to execute arbitrary code via a crafted repository URL. APITAG before NUMBERTAG d and before NUMBERTAG c does not properly check permissions for the ACL plugins, which allows remote authenticated users to gain privileges and add or delete ACL rules via a request to the XMLRPC API. Incorrect access control in the password reset component in Odoo Community NUMBERTAG and earlier and Odoo Enterprise NUMBERTAG and earlier allows authenticated users to reset the password of other users by being the first party to use the secure token. Incorrect access control in the portal messaging system in Odoo Community NUMBERTAG and NUMBERTAG and Odoo Enterprise NUMBERTAG and NUMBERTAG allows remote attackers to post messages on behalf of customers, and to guess document attribute values, via crafted parameters. The espeak ruby gem before NUMBERTAG for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a string to the speak, save, bytes or bytes_wav method in PATHTAG.",
    "CWE-287": "Improper Authentication. When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. Read Application Data. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. null. Insufficiently Protected Credentials. The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. Gain Privileges or Assume Identity. An attacker could gain access to user accounts and access sensitive data used by the user accounts. null. Weak Encoding for Password. Obscuring a password with a trivial encoding does not protect the password. Gain Privileges or Assume Identity. Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password. Not Using Password Aging. If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner. Gain Privileges or Assume Identity. As passwords age, the probability that they are compromised grows. Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach. Password Aging with Long Expiration. Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. Gain Privileges or Assume Identity. As passwords age, the probability that they are compromised grows. Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password. Authentication Bypass Using an Alternate Path or Channel. A product requires authentication, but the product has an alternate path or channel that does not require authentication. Bypass Protection Mechanism. null. Authentication Bypass by Spoofing. This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks. Bypass Protection Mechanism. Gain Privileges or Assume Identity. This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication. null. Authentication Bypass by Capture-replay. A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). Gain Privileges or Assume Identity. Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication. Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server. Improper Certificate Validation. The software does not validate, or incorrectly validates, a certificate. Bypass Protection Mechanism. Gain Privileges or Assume Identity. When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. Incorrect Implementation of Authentication Algorithm. The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect. Bypass Protection Mechanism. This incorrect implementation may allow authentication to be bypassed. Missing Critical Step in Authentication. The software implements an authentication technique, but it skips a step that weakens the technique. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Read Application Data. Execute Unauthorized Code or Commands. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code. Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks. Authentication Bypass by Primary Weakness. The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error. Bypass Protection Mechanism. null. Missing Authentication for Critical Function. The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. Gain Privileges or Assume Identity. Other. Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code. null. Improper Restriction of Excessive Authentication Attempts. The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks. Bypass Protection Mechanism. An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account. null. Use of Single-factor Authentication. The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme. Bypass Protection Mechanism. If the secret in a single-factor authentication scheme gets compromised, full authentication is possible. While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required. Use of Password System for Primary Authentication. The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism. Bypass Protection Mechanism. Gain Privileges or Assume Identity. A password authentication mechanism error will almost always result in attackers being authorized as valid users. null. Weak Password Requirements. The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. Gain Privileges or Assume Identity. An attacker could easily guess user passwords and gain access user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism. Use of Client-Side Authentication. A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected. Unverified Password Change. When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication. Bypass Protection Mechanism. Gain Privileges or Assume Identity. This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user. Weak Password Recovery Mechanism for Forgotten Password. The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. Gain Privileges or Assume Identity. An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials. DoS. Resource Consumption (Other). An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users. Other. The system's security functionality is turned against the system by the attacker. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system. Overly Restrictive Account Lockout Mechanism. The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out. DoS. Resource Consumption (Other). Users could be locked out of accounts. Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive. Use of Hard-coded Credentials. The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. Bypass Protection Mechanism. If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question. Read Application Data. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. Other. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple. Guessable CAPTCHA. The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor. Bypass Protection Mechanism. Other. When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA. An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated that with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA. Use of Password Hash Instead of Password for Authentication. The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store. Bypass Protection Mechanism. Gain Privileges or Assume Identity. An attacker could bypass the authentication routine without knowing the original password. Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password. As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing. Insufficient Session Expiration. According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization. Bypass Protection Mechanism. null. Authentication Bypass by Alternate Name. The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor. Bypass Protection Mechanism. null. Reflection Attack in an Authentication Protocol. Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user. Gain Privileges or Assume Identity. The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user. A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user. Authentication Bypass by Assumed-Immutable Data. The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker. Bypass Protection Mechanism. null. Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created. The software modifies the SSL context after connection creation has begun. Bypass Protection Mechanism. No authentication takes place in this process, bypassing an assumed protection of encryption. Read Application Data. The encrypted communication between a user and a trusted host may be subject to a sniffing attack. If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change. The network enabled distribution of Kura before NUMBERTAG takes control over the device's firewall setup but does not allow IP NUMBERTAG firewall rules to be configured. Still the Equinox console port NUMBERTAG is left open, allowing to log into Kura without any user credentials over unencrypted telnet and executing commands using the Equinox \"exec\" command. As the process is running as \"root\" full control over the device can be acquired. IP NUMBERTAG is also left in auto configuration mode, accepting router advertisements automatically and assigns a MAC address based IP NUMBERTAG address. APITAG before NUMBERTAG has an authentication bypass vulnerability in the authenticate function in PATHTAG because a JWT token may have an empty APITAG (aka shared secret). In Alerta before version NUMBERTAG users may be able to bypass LDAP authentication if they provide an empty password when Alerta server is configure to use LDAP as the authorization provider. Only deployments where LDAP servers are configured to allow unauthenticated authentication mechanism for anonymous authorization are affected. A fix has been implemented in version NUMBERTAG that returns HTTP NUMBERTAG Unauthorized response for any authentication attempts where the password field is empty. As a workaround LDAP administrators can disallow unauthenticated bind requests by clients. Datalust Seq before NUMBERTAG is vulnerable to Authentication Bypass (with the attacker obtaining admin access) via APITAG in an PATHTAG PUT request. An issue was discovered in APITAG NUMBERTAG through NUMBERTAG Due to loose comparison with '==' instead of '===' in FILETAG for the user provided login password, it is possible to login with a simpler password if the password has the form of a power in scientific notation (like NUMBERTAG e2' for NUMBERTAG or NUMBERTAG e NUMBERTAG for NUMBERTAG This is possible because, in the loose comparison case, PHP interprets the string as a number in scientific notation, and thus converts it to a number. After that, the comparison with '==' casts the user input (e.g., the string NUMBERTAG or NUMBERTAG to a number, too. Hence the attacker can login with just a NUMBERTAG or a simple number he has to brute force. Strong comparison with '===' prevents the cast into numbers.",
    "CWE-78": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. Read Files or Directories. Modify Files or Directories. Read Application Data. Modify Application Data. Hide Activities. Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'). The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. Execute Unauthorized Code or Commands. Alter Execution Logic. Read Application Data. Modify Application Data. An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior. When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences. Incomplete List of Disallowed Inputs. The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses. Bypass Protection Mechanism. Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism. An issue was discovered in APITAG NUMBERTAG An authenticated web user with sufficient privileges could abuse the APITAG module to run arbitrary OS commands via the PATHTAG FILETAG target field. iCMS NUMBERTAG attackers to execute arbitrary OS commands via shell metacharacters in the DB_PREFIX parameter to APITAG. A Server Side Template Injection issue was discovered in Crafter CMS NUMBERTAG Attackers with developer privileges may execute OS commands by APITAG a template file (.ftl filetype) that triggers a call to APITAG in the APITAG library during rendering of a web page. Growl adds growl notification support to nodejs. Growl before NUMBERTAG does not properly sanitize input before passing it to exec, allowing for arbitrary command execution. DISPUTED Monstra CMS NUMBERTAG allows an attacker, who already has administrative access to modify FILETAG files on the Edit Chunk screen, to execute arbitrary OS commands via the Theme Module by visiting the APITAG URI. NOTE: there is no indication that the Edit Chunk feature was intended to prevent an administrator from using PHP's exec feature.",
    "CWE-306": "Missing Authentication for Critical Function. The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. Gain Privileges or Assume Identity. Other. Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code. null. APITAG APITAG and other APITAG robots use the Robot Operating System (ROS) default packages exposing the computational graph without any sort of authentication. This allows attackers with access to the internal wireless and wired networks to take control of the robot seamlessly. In combination with CVETAG and CVETAG , this flaw allows malicious actors to command the robot at desire. auth_svc in Caldera before NUMBERTAG allows authentication bypass (for REST API requests) via a forged \"localhost\" string in the HTTP Host header. DISPUTED In Supervisor through NUMBERTAG an unauthenticated user can read log files or restart a service. Note: The maintainer responded that the affected component, inet_http_server, is not enabled by default but if the user enables it and does not set a password, Supervisor logs a warning message. The maintainer indicated the ability to run an open server will not be removed but an additional warning was added to the documentation. In Odoo NUMBERTAG Odoo Community Edition NUMBERTAG and NUMBERTAG and Odoo Enterprise Edition NUMBERTAG and NUMBERTAG remote attackers can bypass authentication under certain circumstances because parameters containing NUMBERTAG characters are truncated before reaching the database layer. This occurs because Psycopg NUMBERTAG before NUMBERTAG is used.",
    "CWE-639": "Authorization Bypass Through User-Controlled Key. The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. Bypass Protection Mechanism. Access control checks for specific user data or functionality can be bypassed. Gain Privileges or Assume Identity. Horizontal escalation of privilege is possible (one user can view/modify information of another user). Gain Privileges or Assume Identity. Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access. Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data. Authorization Bypass Through User-Controlled SQL Primary Key. The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor. Read Application Data. Modify Application Data. Bypass Protection Mechanism. When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table. DISPUTED APITAG NUMBERTAG allows full path disclosure via authenticated PATHTAG input that triggers a syntax error. NOTE: This has been disputed with the following reasoning: APITAG issue reported requires full developer level access to the content management system where cross site scripting is not an issue you already have full control of the CMS including running arbitrary PHP.\". An issue was discovered in the Voyager package through NUMBERTAG for Laravel. An attacker with admin privileges and Compass access can read or delete arbitrary files, such as the .env file. NOTE: a software maintainer has suggested a solution in which Compass is switched off in a production environment. An issue was discovered in Gleez CMS NUMBERTAG Because of an Insecure Direct Object Reference vulnerability, it is possible for attackers (logged in users) to view profile page of other users, as demonstrated by navigating to user NUMBERTAG on APITAG. In Webkul Bagisto before NUMBERTAG the functionalities for customers to change their own values (such as address, review, orders, etc.) can also be manipulated by other customers. In Cacti through NUMBERTAG authenticated users may bypass authorization checks (for viewing a graph) via a direct FILETAG request with a modified local_graph_id parameter.",
    "CWE-129": "Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Use of Out-of-range Pointer Offset. The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer. Read Memory. If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is malformed or larger than expected by a read or write operation, the application may terminate unexpectedly. Execute Unauthorized Code or Commands. Modify Memory. If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution. Improper Validation of Array Index. The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array. DoS. Crash, Exit, or Restart. Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area. Modify Memory. If the memory corrupted is data, rather than instructions, the system will continue to function with improper values. Modify Memory. Read Memory. Use of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., buffer overflows are not always the result. This may result in the exposure or modification of sensitive data. Execute Unauthorized Code or Commands. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution. null. Memory Allocation with Excessive Size Value. The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. DoS. Resource Consumption (Memory). Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system. null. The APITAG function in dgif_lib.c in GIFLIB (possibly version NUMBERTAG as later shipped in cgif.c in sam2p NUMBERTAG has a heap based buffer overflow because a certain APITAG APITAG NUMBERTAG array index is not checked. This will lead to a denial of service or possibly unspecified other impact. An issue was discovered in the sized chunks crate through NUMBERTAG for Rust. In the Chunk implementation, the array size is not checked when constructed with APITAG. The APITAG function in dgif_lib.c in GIFLIB (possibly version NUMBERTAG as later shipped in cgif.c in sam2p NUMBERTAG has a heap based buffer overflow because a certain APITAG array index is not checked. This will lead to a denial of service or possibly unspecified other impact. Buffer overflows were discovered in the APITAG library in Arm Mbed OS NUMBERTAG The APITAG parser is responsible for parsing received APITAG packets. The function APITAG parses APITAG input linearly using a while loop. Once an option is parsed in a loop, the current point ( packet_data_pptr) is increased correspondingly. The pointer is restricted by the size of the received buffer, as well as by the APITAG delimiter byte. Inside each while loop, the check of the value of packet_data_pptr is not strictly enforced. More specifically, inside a loop, packet_data_pptr could be increased and then dereferenced without checking. Moreover, there are many other functions in the format of sn_coap_parser_ () that do not check whether the pointer is within the bounds of the allocated buffer. All of these lead to heap based or stack based buffer overflows, depending on how the APITAG packet buffer is allocated.",
    "CWE-502": "Deserialization of Untrusted Data. The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. Modify Application Data. Unexpected State. Attackers can modify unexpected objects or data that was assumed to be safe from modification. DoS. Resource Consumption (CPU). If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate. Varies by Context. The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation. It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell. Improperly Controlled Modification of Dynamically-Determined Object Attributes. The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified. Modify Application Data. An attacker could modify sensitive data or program variables. Execute Unauthorized Code or Commands. Varies by Context. Alter Execution Logic. If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection. An issue was discovered in APITAG jackson databind prior to NUMBERTAG and NUMBERTAG When Default Typing is enabled (either globally or for a specific property), the service has the Oracle JDBC jar in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload. jsonpickle through NUMBERTAG allows remote code execution during deserialization of a malicious payload through the APITAG function. APITAG jackson databind NUMBERTAG through NUMBERTAG lacks certain xbean reflect/JNDI blocking, as demonstrated by APITAG. APITAG jackson databind NUMBERTAG before NUMBERTAG might allow remote attackers to execute arbitrary code by leveraging failure to block the slf4j ext class from polymorphic deserialization. SOY CMS NUMBERTAG and earlier is affected by Unauthenticated Remote Code Execution (RCE). The allows remote attackers to execute any arbitrary code when the inquiry form feature is enabled by the service. The vulnerability is caused by unserializing the form without any restrictions. This was fixed in NUMBERTAG.",
    "CWE-770": "Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Allocation of Resources Without Limits or Throttling. The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource. Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service. Improperly Controlled Sequential Memory Allocation. The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects. DoS. Resource Consumption (Memory). Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system. While the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service. Allocation of File Descriptors or Handles Without Limits or Throttling. The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor. DoS. Resource Consumption (Other). When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource. This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations. Memory Allocation with Excessive Size Value. The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. DoS. Resource Consumption (Memory). Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system. null. The Kubernetes API server component in versions prior to NUMBERTAG and NUMBERTAG has been found to be vulnerable to a denial of service attack via successful API requests. The APITAG function in APITAG NUMBERTAG allows remote attackers to cause a denial of service (CPU consumption) via a crafted file. The APITAG function in coders/cin.c in APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote attackers to cause a denial of service (memory consumption) via a crafted file. In APITAG NUMBERTAG a memory exhaustion vulnerability was found in the function APITAG in coders/miff.c, which allows attackers to cause a denial of service. In APITAG NUMBERTAG a memory exhaustion vulnerability was found in the function APITAG in coders/mpc.c, which allows attackers to cause a denial of service.",
    "CWE-384": "Unintended Proxy or Intermediary ('Confused Deputy'). The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. Gain Privileges or Assume Identity. Hide Activities. Execute Unauthorized Code or Commands. If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources. Origin Validation Error. The software does not properly verify that the source of data or communication is valid. Gain Privileges or Assume Identity. Varies by Context. An attacker can access any functionality that is inadvertently accessible to the source. null. External Control of Assumed-Immutable Web Parameter. The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields. Modify Application Data. Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies. If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application. Session Fixation. Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. Gain Privileges or Assume Identity. Such a scenario is commonly observed when: A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session. Monstra CMS NUMBERTAG has a Session Management Issue in the Users tab. A password change at PATHTAG does not invalidate a session that is open in a different browser. An issue was discovered in APITAG before NUMBERTAG An attacker can create a new session on a web application and record the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier. The attacker can access the user's account through the active session. The Session Fixation attack fixes a session on the victim's browser, so the attack starts before the user logs in. REST client for Ruby (aka rest client) before NUMBERTAG allows remote attackers to conduct session fixation attacks or obtain sensitive cookie information by leveraging passage of cookies set in a response to a redirect. Gitea before NUMBERTAG allows remote code execution because it does not properly validate session IDs. This is related to session ID handling in the go macaron/session code for Macaron. Monstra CMS NUMBERTAG has a Session Management Issue in the Administrations Tab. A password change at APITAG does not invalidate a session that is open in a different browser.",
    "CWE-611": "Unintended Proxy or Intermediary ('Confused Deputy'). The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. Gain Privileges or Assume Identity. Hide Activities. Execute Unauthorized Code or Commands. If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources. Improper Restriction of XML External Entity Reference. The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. Read Application Data. Read Files or Directories. If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. Bypass Protection Mechanism. The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing. XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents. Triplea version NUMBERTAG contains a XML External Entity (XXE) vulnerability in Importing game data that can result in Possible information disclosure, server side request forgery, or remote code execution. This attack appear to be exploitable via Specially crafted game data file (XML). Stroom version NUMBERTAG contains a XML External Entity (XXE) vulnerability in XML Parser that can result in disclosure of confidential data, denial of service, server side request forgery, port scanning. This attack appear to be exploitable via Specially crafted XML file. The data import functionality in APITAG through NUMBERTAG allows an XML External Entity (XXE) attack through a crafted (zip) file, allowing attackers to read arbitrary files. bw calendar engine version <= bw calendar engine NUMBERTAG contains a XML External Entity (XXE) vulnerability in APITAG XML Parser that can result in Disclosure of confidential data, denial of service, SSRF, port scanning. This attack appear to be exploitable via Man in the Middle or malicious server. In APITAG in APITAG before NUMBERTAG the APITAG instance in APITAG is missing flags to prevent XML External Entity (XXE) attacks, as demonstrated by APITAG.",
    "CWE-91": "XML Injection (aka Blind XPath Injection). The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. Execute Unauthorized Code or Commands. Read Application Data. Modify Application Data. Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax. Improper Neutralization of Data within XPath Expressions ('XPath Injection'). The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. Bypass Protection Mechanism. Controlling application flow (e.g. bypassing authentication). Read Application Data. The attacker could read restricted XML content. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'). The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. Read Application Data. An attacker might be able to read sensitive information from the XML database. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). APITAG in APITAG APITAG through NUMBERTAG allows a bypass of protection mechanisms for XXE via UTF NUMBERTAG encoding in a .xlsx file. Openpsa contains a XML Injection vulnerability in RSS file upload feature that can result in Remote denial of service. This attack appear to be exploitable via Specially crafted XML file. This vulnerability appears to have been fixed in after commit NUMBERTAG a NUMBERTAG. petl before NUMBERTAG in some configurations, allows resolution of entities in an XML document. APITAG NUMBERTAG SP2 allows XML injection, and resultant remote code execution, via a \"<file type='file' name='../\" substring. dom4j version prior to version NUMBERTAG contains a CVETAG : XML Injection vulnerability in Class: Element. Methods: APITAG APITAG that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in NUMBERTAG or later.",
    "CWE-522": "Insufficiently Protected Credentials. The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. Gain Privileges or Assume Identity. An attacker could gain access to user accounts and access sensitive data used by the user accounts. null. Unprotected Storage of Credentials. Storing a password in plaintext may result in a system compromise. Gain Privileges or Assume Identity. Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. Storing Passwords in a Recoverable Format. The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts. Gain Privileges or Assume Identity. User's passwords may be revealed. Gain Privileges or Assume Identity. Revealed passwords may be reused elsewhere to impersonate the users in question. null. Password in Configuration File. The software stores a password in a configuration file that might be accessible to actors who do not know the password. Gain Privileges or Assume Identity. This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing. Unprotected Transport of Credentials. Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server. Gain Privileges or Assume Identity. null. Missing Password Field Masking. The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords. Bypass Protection Mechanism. null. The Requests package before NUMBERTAG for Python sends an HTTP Authorization header to an http URI upon receiving a same hostname https to http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network. The HTTP client in Gradle before NUMBERTAG sends authentication credentials originally destined for the configured host. If that host returns a NUMBERTAG redirect, Gradle also sends those credentials to all subsequent hosts that the request redirects to. This is similar to CVETAG . APITAG version NUMBERTAG and earlier contains a Storing Passwords in a Recoverable Format vulnerability in Shared password vaults that can result in all shared passwords are recoverable server side. This attack appears to be exploitable via any vulnerability that can bypass authentication or role assignment and can lead to shared password leakage. The IRC5 family with UAS service enabled comes by default with credentials that can be found on publicly available manuals. ABB considers this a well documented functionality that helps customer set up however, out of our research, we found multiple production systems running these exact default credentials and consider thereby this an exposure that should be mitigated. Moreover, future deployments should consider that these defaults should be forbidden (user should be forced to change them). Copay Bitcoin Wallet version NUMBERTAG to NUMBERTAG included. contains a APITAG vulnerability in wallet private key storage that can result in Users' private key can be compromised. . This attack appear to be exploitable via Affected version run the malicious code at startup . This vulnerability appears to have been fixed in NUMBERTAG and later .",
    "CWE-918": "Server-Side Request Forgery (SSRF). The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Read Application Data. Execute Unauthorized Code or Commands. By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests. DISPUTED mPDF through NUMBERTAG if deployed as a web application that accepts arbitrary HTML, allows SSRF, as demonstrated by a '<img src=\" FILETAG substring that triggers a call to APITAG in FILETAG . NOTE: the software maintainer disputes this, stating \"If you allow users to pass HTML without sanitising it, you're asking for trouble.\". The Kubernetes kube controller manager in versions NUMBERTAG ersions prior to NUMBERTAG and version NUMBERTAG are vulnerable to a Server Side Request Forgery (SSRF) that allows certain authorized users to leak up to NUMBERTAG bytes of arbitrary information from unprotected endpoints within the master's host network (such as link local or loopback services). SSRF vulnerability in FILETAG in Allen Disk NUMBERTAG allows remote authenticated users to conduct port scans and access intranet servers via a crafted file parameter. Rhymix CMS NUMBERTAG allows SSRF via an APITAG SVG upload. An SSRF issue was discovered in tecrail Responsive APITAG NUMBERTAG ia the FILETAG url parameter. NOTE: this issue exists because of an incomplete fix for CVETAG .",
    "CWE-89": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'). The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Read Application Data. Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities. Bypass Protection Mechanism. If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password. Bypass Protection Mechanism. If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability. Modify Application Data. Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes. SQL Injection: Hibernate. Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. Read Application Data. Modify Application Data. null. Missing Initialization of a Variable. The software does not initialize critical variables, which causes the execution environment to use unexpected values. Unexpected State. Quality Degradation. Varies by Context. The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem. null. APITAG NUMBERTAG has SQL Injection via the FILETAG preview parameter. In REDAXO before NUMBERTAG a critical SQL injection vulnerability has been discovered in the rex_list class because of the APITAG function in PATHTAG via the APITAG sort parameter. Endangered was the backend and the frontend only if rex_list were used. PATHTAG in APITAG NUMBERTAG contains a SQL Injection vulnerability in the reference field that can allow the attacker to grab the entire database of the application via the FILETAG APITAG parameter. APITAG in iCMS NUMBERTAG allows SQL injection via APITAG because the upfile content is base NUMBERTAG decoded, deserialized, and used for database insertion. FUEL CMS NUMBERTAG allows SQL Injection via the layout, published, or search_term parameter to pages/items.",
    "CWE-617": "Reachable Assertion. The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. DoS. Crash, Exit, or Restart. An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session. While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service. Off-by-one Error. A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. In APITAG NUMBERTAG Q NUMBERTAG an assertion failure was found in the function APITAG which allows attackers to cause a denial of service via a crafted file. APITAG NUMBERTAG allows attackers to cause a denial of service (assertion failure) because a property key query for a Proxy object returns unintended data. tinyexr NUMBERTAG has an assertion failure in APITAG in tinyexr.h. stb stb_truetype.h through NUMBERTAG has an assertion failure in stbtt__cff_get_index. The APITAG function in APITAG in APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted file.",
    "CWE-401": "Detection of Error Condition Without Action. The software detects a specific error, but takes no actions to handle the error. Varies by Context. Unexpected State. Alter Execution Logic. An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior. null. Missing Release of Memory after Effective Lifetime. The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. DoS. Crash, Exit, or Restart. DoS. Instability. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition. Reduce Performance. This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release. APITAG NUMBERTAG Q NUMBERTAG has memory leaks at APITAG because of mishandling the APITAG error in APITAG in APITAG. In Live NUMBERTAG a setup packet can cause a memory leak leading to APITAG because, when there are multiple instances of a single field (username, realm, nonce, uri, or response), only the last instance can ever be freed. In APITAG before NUMBERTAG a memory leak exists in APITAG in coders/sixel.c. APITAG NUMBERTAG Q NUMBERTAG has memory leaks in APITAG because of an APITAG error. In Eclipse Wakaama (formerly liblwm2m NUMBERTAG PATHTAG in lwm2mserver in the LWM2M server mishandles invalid options, leading to a memory leak. Processing of a single crafted packet leads to leaking (wasting NUMBERTAG bytes of memory. This can lead to termination of the LWM2M server after exhausting all available memory.",
    "CWE-798": "Use of Hard-coded Credentials. The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. Bypass Protection Mechanism. If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question. Read Application Data. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. Other. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple. Storing Passwords in a Recoverable Format. The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts. Gain Privileges or Assume Identity. User's passwords may be revealed. Gain Privileges or Assume Identity. Revealed passwords may be reused elsewhere to impersonate the users in question. null. Use of Hard-coded Password. The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. Gain Privileges or Assume Identity. If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question. A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks for a hard-coded password. Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple. Use of Hard-coded Cryptographic Key. The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered. Bypass Protection Mechanism. Gain Privileges or Assume Identity. If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question. null. The password for the safety PLC is the default and thus easy to find (in manuals, etc.). This allows a manipulated program to be uploaded to the safety PLC, effectively disabling the emergency stop in case an object is too close to the robot. Navigation and any other components dependent on the laser scanner are not affected (thus it is hard to detect before something happens) though the laser scanner configuration can also be affected altering further the safety of the device. The demo feature in Oracle APITAG Open Source Edition NUMBERTAG has TCP port NUMBERTAG open by default with a password of admin for the admin account. This allows remote attackers to obtain potentially sensitive information, perform database operations, or manipulate the demo via a JMX RMI session, aka a \"jmx_rmi remote monitoring and control problem.\" NOTE: this is not an Oracle supported product. One of the wireless interfaces within APITAG APITAG and possibly (according to the vendor) other APITAG fleet vehicles comes pre configured in APITAG Master APITAG Point) mode. Credentials to such wireless Access Point default to well known and widely spread SSID APITAG and passwords (omitted). This information is also available in past User Guides and manuals which the vendor distributed. We have confirmed this flaw in APITAG and APITAG but it might also apply to APITAG APITAG and APITAG. Out of the wired and wireless interfaces within APITAG APITAG and other vehicles from the APITAG fleet, it's possible to access the Control Dashboard on a hardcoded IP address. Credentials to such wireless interface default to well known and widely spread users (omitted) and passwords (omitted). This information is also available in past User Guides and manuals which the vendor distributed. This flaw allows cyber attackers to take control of the robot remotely and make use of the default user interfaces APITAG has created, lowering the complexity of attacks and making them available to entry level attackers. More elaborated attacks can also be established by clearing authentication and sending network requests directly. We have confirmed this flaw in APITAG and APITAG but according to the vendor, it might also apply to APITAG APITAG and APITAG.",
    "CWE-601": "URL Redirection to Untrusted Site ('Open Redirect'). A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. Bypass Protection Mechanism. Gain Privileges or Assume Identity. The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Other. The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site. An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Open redirect vulnerability in Gogs before NUMBERTAG allows remote attackers to redirect users to arbitrary websites and conduct phishing attacks via an initial /\\ substring in the user/login redirect_to parameter, related to the function APITAG in PATHTAG. The Kubernetes kube apiserver in versions NUMBERTAG and versions prior to NUMBERTAG and NUMBERTAG are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise. mod_auth_mellon through NUMBERTAG has an Open Redirect via the APITAG substring, as demonstrated by omitting the // after http: in the target URL. Open redirect vulnerability in werkzeug before NUMBERTAG ia a double slash in the URL. In Ktor through NUMBERTAG the client resends data from the HTTP Authorization header to a redirect location.",
    "CWE-190": "Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Integer Overflow or Wraparound. The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc. Wrap-around Error. Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. In PATHTAG function APITAG did not checkout the input length, which lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Openc NUMBERTAG and earlier. In Live NUMBERTAG there is a buffer overflow via a large integer in a Content Length HTTP header because APITAG has an unrestricted memmove. A pointer overflow, with code execution, was discovered in APITAG libzmq (aka NUMBERTAG MQ NUMBERTAG and NUMBERTAG before NUMBERTAG A NUMBERTAG decoder.cpp zmq NUMBERTAG decoder_t::size_ready integer overflow allows an authenticated attacker to overwrite an arbitrary amount of bytes beyond the bounds of a buffer, which can be leveraged to run arbitrary code on the target system. The memory layout allows the attacker to inject OS commands into a data structure located immediately after the problematic buffer (i.e., it is not necessary to use a typical buffer overflow exploitation technique that changes the flow of control). Multiple integer overflows in CCN lite before NUMBERTAG allow context dependent attackers to have unspecified impact via vectors involving the NUMBERTAG allen variable in the iottlv_parse_sequence function or NUMBERTAG typ, vallen and i variables in the localrpc_parse function. A APITAG integer overflow in Exi NUMBERTAG through NUMBERTAG allows an attacker to cause a denial of service (large heap allocation followed by a very long running loop) via a crafted WEBP image file.",
    "CWE-120": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service. Modify Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections. Write-what-where Condition. Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. DoS. Crash, Exit, or Restart. Modify Memory. Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. Improper Null Termination. The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. Read Memory. Execute Unauthorized Code or Commands. The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code. DoS. Crash, Exit, or Restart. Read Memory. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could. cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer. Modify Memory. DoS. Crash, Exit, or Restart. Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory. Alter Execution Logic. Execute Unauthorized Code or Commands. Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code. Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible. Use of Path Manipulation Function without Maximum-sized Buffer. The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX. Modify Memory. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others. Unsigned to Signed Conversion Error. The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive. DoS. Crash, Exit, or Restart. Incorrect sign conversions generally lead to undefined behavior, and therefore crashes. Modify Memory. If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic. Improper Handling of Extra Values. The software does not handle or incorrectly handles when more values are provided than expected. Unexpected State. null. Use After Free. Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. Modify Memory. The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere. DoS. Crash, Exit, or Restart. If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information. Execute Unauthorized Code or Commands. If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code. The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved. Missing Initialization of a Variable. The software does not initialize critical variables, which causes the execution environment to use unexpected values. Unexpected State. Quality Degradation. Varies by Context. The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem. null. regcomp.c in Perl before NUMBERTAG allows a buffer overflow via a crafted regular expression because of recursive S_study_chunk calls. In XS NUMBERTAG in Moddable SDK OS NUMBERTAG there is a heap based buffer overflow in APITAG in APITAG when called from APITAG in APITAG as demonstrated by crafted APITAG code to xst. An issue was discovered in the ROS communications related packages (aka ros_comm or ros melodic ros comm) through NUMBERTAG A buffer overflow allows attackers to cause a denial of service and possibly execute arbitrary code via an IP address with a long hostname. Liblouis NUMBERTAG has a Segmentation fault in APITAG in logging.c. Firecracker vsock implementation buffer overflow in versions NUMBERTAG and NUMBERTAG This can result in potentially exploitable crashes.",
    "CWE-276": "Incorrect Default Permissions. During installation, installed file permissions are set to allow anyone to modify those files. Read Application Data. Modify Application Data. null. WTF before NUMBERTAG does not set the permissions of FILETAG , which might make it easier for local attackers to read passwords or API keys if the permissions were misconfigured or were based on unsafe OS defaults. user_channel/passwd_mgr.cpp in APITAG phosphor host ipmid before NUMBERTAG does not ensure that /etc/ipmi pass has strong file permissions. The XML RPC server in supervisor before NUMBERTAG before NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote authenticated users to execute arbitrary commands via a crafted XML RPC request, related to nested supervisord namespace lookups. APITAG robot controllers (central computation unit) makes use of Ubuntu NUMBERTAG an operating system, Thought for desktop uses, this operating system presents insecure defaults for robots. These insecurities include a way for users to escalate their access beyond what they were granted via file creation, access race conditions, insecure home directory configurations and defaults that facilitate Denial of Service APITAG attacks.",
    "CWE-212": "Improper Removal of Sensitive Information Before Storage or Transfer. The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors. Read Files or Directories. Read Application Data. Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack. Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site. Sensitive Information in Resource Not Removed Before Reuse. When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource. Read Application Data. When resources are released, they can be made available for reuse. For example, after memory is used and released, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated. Exposure of Sensitive System Information Due to Uncleared Debug Information. The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered. Read Memory. Bypass Protection Mechanism. Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties. Insertion of Sensitive Information Into Sent Data. The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor. Read Files or Directories. Read Memory. Read Application Data. Sensitive data may be exposed to attackers. Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). A flaw was found in Ansible Base when using the aws_ssm connection plugin as garbage collector is not happening after playbook run is completed. Files would remain in the bucket exposing the data. This issue affects directly data confidentiality. In Kubernetes NUMBERTAG and NUMBERTAG the APITAG method returns a copy of the provided config, with credentials removed (bearer token, username/password, and client certificate/key data). In the affected versions, APITAG did not effectively clear service account credentials loaded using APITAG.",
    "CWE-294": "Authentication Bypass by Capture-replay. A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). Gain Privileges or Assume Identity. Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication. Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server. The HTTP Digest Authentication in the APITAG web server before NUMBERTAG does not completely protect against replay attacks. This allows an unauthenticated remote attacker to bypass authentication via capture replay if TLS is not used to protect the underlying communication channel. Saml2 Authentication services for ASP.NET APITAG package APITAG greater than NUMBERTAG and less than version NUMBERTAG has a faulty implementation of Token Replay Detection. Token Replay Detection is an important defence in depth measure for Single Sign On solutions. The NUMBERTAG ersion is patched. Note that version NUMBERTAG is not affected. It has a correct Token Replay Implementation and is safe to use. Saml2 Authentication services for ASP.NET APITAG package APITAG greater than NUMBERTAG and less than version NUMBERTAG have a faulty implementation of Token Replay Detection. Token Replay Detection is an important defense measure for Single Sign On solutions. The NUMBERTAG ersion is patched. Note that version NUMBERTAG and prior versions are not affected. These versions have a correct Token Replay Implementation and are safe to use.",
    "CWE-426": "Untrusted Search Path. The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. There is the potential for arbitrary code execution with privileges of the vulnerable program. DoS. Crash, Exit, or Restart. The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format. Read Files or Directories. The program could send the output of unauthorized files to the attacker. This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order. Uncontrolled Search Path Element. The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. Execute Unauthorized Code or Commands. Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element. Unquoted Search Path or Element. The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. Execute Unauthorized Code or Commands. If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec. Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. monero wallet gui in Monero GUI before NUMBERTAG includes the . directory in an embedded RPATH (with a preference ahead of /usr/lib), which allows local users to gain privileges via a Trojan horse library in the current working directory. Untrusted search path vulnerability in APITAG NG before NUMBERTAG allows local users to gain privileges via a Trojan horse libproxychains4.so library in the current working directory, which is referenced in the LD_PRELOAD path. NSA Ghidra through NUMBERTAG uses a potentially untrusted search path. When executing Ghidra from a given path, the Java process working directory is set to this path. Then, when launching the Python interpreter via the APITAG Codebrowser > Window > Python\" option, Ghidra will try to execute the FILETAG program from this working directory. NSA Ghidra before NUMBERTAG is vulnerable to DLL hijacking because it loads jansi.dll from the current working directory. The APITAG function in xmlparse.c in libexpat in Expat NUMBERTAG and NUMBERTAG on Windows allows local users to gain privileges via a Trojan horse ADVAPI NUMBERTAG DLL in the current working directory because of an untrusted search path, aka DLL hijacking.",
    "CWE-862": "Missing Authorization. The software does not perform an authorization check when an actor attempts to access a resource or perform an action. Read Application Data. Read Files or Directories. An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data. Modify Application Data. Modify Files or Directories. An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data. Gain Privileges or Assume Identity. Bypass Protection Mechanism. An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. Not Using Complete Mediation. The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. Other. A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource. null. Direct Request ('Forced Browsing'). The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. Read Application Data. Modify Application Data. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path. Improper Authorization in Handler for Custom URL Scheme. The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme. Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme. Missing Write Protection for Parametric Data Values. The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure. Quality Degradation. DoS. Resource Consumption (Other). LIKELIHOOD. High. Sensor value manipulation, particularly thermal or power, may allow physical damage to occur or disabling of the device by a false fault shutdown causing a Denial-Of-Service. Various sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software. The limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits. While the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed. PATHTAG in Gogs NUMBERTAG lacks permission checks for routes: deploy keys, collaborators, and hooks. PKCE support is not implemented in accordance with the RFC for APITAG NUMBERTAG for Native Apps. Without the use of PKCE, the authorization code returned by an authorization server is not enough to guarantee that the client that issued the initial authorization request is the one that will be authorized. An attacker is able to obtain the authorization code using a malicious app on the client side and use it to gain authorization to the protected resource. This affects the package APITAG client:google oauth client before NUMBERTAG. Kubernetes version NUMBERTAG is vulnerable to a privilege escalation in the APITAG admission plugin resulting in the ability to make use of any existing APITAG object. A flaw was found in the Eclipse Che up to version NUMBERTAG where it did not properly restrict access to workspace pods. An authenticated user can exploit this flaw to bypass JWT proxy and gain access to the workspace pods of another user. Successful exploitation requires knowledge of the service name and namespace of the target pod. Saleor Issue was introduced by merge commit: APITAG This commit was released as part of NUMBERTAG release is affected by: Incorrect Access Control. The impact is: Important. The component is: APITAG type in APITAG API. The attack vector is: Unauthenticated user can access the APITAG API (which is by default publicly exposed under APITAG URL) and fetch products data which may include admin restricted shop's revenue data. The fixed version is NUMBERTAG.",
    "CWE-254": "The Doorkeeper gem before NUMBERTAG for Ruby might allow remote attackers to conduct replay attacks or revoke arbitrary tokens by leveraging failure to implement the APITAG NUMBERTAG Token Revocation specification. The default APITAG configuration for APITAG in the APITAG framework before NUMBERTAG as used in the APITAG iOS Library, disables verification of a server hostname against the domain name in the subject's Common Name (CN) of the NUMBERTAG certificate, which allows man in the middle attackers to spoof SSL servers via an arbitrary valid certificate. Tinfoil Devise two factor before NUMBERTAG does not strictly follow section NUMBERTAG of RFC NUMBERTAG and does not \"burn\" a successfully validated one time password (aka OTP), which allows remote or physically proximate attackers with a target user's login credentials to log in as said user by obtaining the OTP through performing a man in the middle attack between the provider and verifier, or shoulder surfing, and replaying the OTP in the current time step. The HTTPS fallback implementation in Shell In A Box (aka shellinabox) before NUMBERTAG makes it easier for remote attackers to conduct DNS rebinding attacks via the \"/plain\" URL. web2py before NUMBERTAG does not properly check if a host is denied before verifying passwords, allowing a remote attacker to perform brute force attacks. When server level, connection level or route level CORS configurations in hapi node module before NUMBERTAG are combined and when a higher level config included security restrictions (like origin), a higher level config that included security restrictions (like origin) would have those restrictions overridden by less restrictive defaults (e.g. origin defaults to all origins APITAG ). Zcash NUMBERTAG allows an inexpensive approach to \"fill all transactions of all blocks\" and \"prevent any real transaction from occurring\" via a APITAG Wood Chipper\" attack. The APITAG function in PATHTAG in Blink, as used in Google Chrome before NUMBERTAG does not properly restrict the availability of IFRAME Resource Timing API times, which allows remote attackers to obtain sensitive information via crafted APITAG code that leverages a APITAG call. Tor Browser Launcher (aka torbrowser launcher) before NUMBERTAG during the initial run, allows man in the middle attackers to bypass the PGP signature verification and execute arbitrary code via a Trojan horse tar file and a signature file with the valid tarball and signature. K NUMBERTAG Mail NUMBERTAG can include the original quoted HTML code of a specially crafted, benign looking, email within (digitally signed) reply messages. The quoted part can contain conditional statements that show completely different text if opened in a different email client. This can be abused by an attacker to obtain valid S/MIME or PGP signatures for arbitrary content to be displayed to a third party. NOTE: the vendor states \"We don't plan to take any action because of this.\".",
    "CWE-122": "Heap-based Buffer Overflow. A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Modify Memory. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. In APITAG NUMBERTAG calling APITAG is likely to result in a heap buffer overflow. This has been fixed in NUMBERTAG.",
    "CWE-665": "Improper Initialization. The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. Read Memory. Read Application Data. When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party. Bypass Protection Mechanism. If security-critical decisions rely on a variable having a 0 or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur. DoS. Crash, Exit, or Restart. The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments. This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not. External Initialization of Trusted Variables or Data Stores. The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors. Modify Application Data. An attacker could gain access to and modify sensitive data or system information. A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do. Non-exit on Failed Initialization. The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator. Modify Application Data. Alter Execution Logic. The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed. null. Allocation of Resources Without Limits or Throttling. The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource. Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service. Use of Uninitialized Resource. The software uses or accesses a resource that has not been initialized. Read Memory. Read Application Data. When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party. DoS. Crash, Exit, or Restart. The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend. When a resource has not been properly initialized, the software may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the software. Missing Initialization of Resource. The software does not initialize a critical resource. Read Memory. Read Application Data. When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party. DoS. Crash, Exit, or Restart. The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend. Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values. Initialization with Hard-Coded Network Resource Configuration Data. The software initializes data using hard-coded values that act as network resource identifiers. Reduce Reliability. This issue can prevent the software from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. Excessive Use of Hard-Coded Literals in Initialization. The software initializes a data element using a hard-coded literal that is not a simple integer or static constant element. Reduce Maintainability. This issue makes it more difficult to modify or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. Insecure Default Initialization of Resource. The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure. Developers often choose default values that leave the software as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it. Incorrect Register Defaults or Module Parameters. Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values. Varies by Context. Degradation of system functionality, or loss of access control enforcement. Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design. The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive. Uninitialized Value on Reset for Registers Holding Security Settings. Security-critical logic is not set to a known value on reset. Varies by Context. When the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack. Cryptographic Operations are run Before Supporting Units are Ready. Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result. Varies by Context. Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied. hdf/dataobject.c in libmysofa before NUMBERTAG has an uninitialized use of memory, as demonstrated by mysofa2json. In coturn before version NUMBERTAG there is an issue whereby STUN/TURN response buffer is not initialized properly. There is a leak of information between different client connections. One client (an attacker) could use their connection to intelligently query coturn to get interesting bytes in the padding bytes from the connection of another client. This has been fixed in NUMBERTAG. APITAG NUMBERTAG has a \"use of uninitialized value\" vulnerability in the APITAG function in coders/jp2.c. Nagios Core before NUMBERTAG creates a APITAG PID file after dropping privileges to a non root account, which might allow local users to kill arbitrary processes by leveraging access to this non root account for APITAG modification before a root script executes a \"kill APITAG \" command. APITAG NUMBERTAG has a \"use of uninitialized value\" vulnerability in the APITAG function in APITAG This is related to APITAG in magick/image.c.",
    "CWE-295": "Improper Certificate Validation. The software does not validate, or incorrectly validates, a certificate. Bypass Protection Mechanism. Gain Privileges or Assume Identity. When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. Improper Following of a Certificate's Chain of Trust. The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate. Hide Activities. Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity. If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to: Any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party. Improper Check for Certificate Revocation. The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised. Gain Privileges or Assume Identity. Trust may be assigned to an entity who is not who it claims to be. Other. Data from an untrusted (and possibly malicious) source may be integrated. Read Application Data. Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure. An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync. Key Exchange without Entity Authentication. The software performs a key exchange with an actor without verifying the identity of that actor. Bypass Protection Mechanism. No authentication takes place in this process, bypassing an assumed protection of encryption. Read Application Data. The encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path. Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc. Improper Validation of Certificate with Host Mismatch. The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host. Gain Privileges or Assume Identity. The data read from the system vouched for by the certificate may not be from the expected system. Other. Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks. Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed. Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name. This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned. Improper Validation of Certificate Expiration. A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age. Other. The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing. Other. Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks. When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost. Missing Validation of OpenSSL Certificate. The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements. Read Application Data. The data read may not be properly secured, it might be viewed by an attacker. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Trust afforded to the system in question may allow for spoofing or redirection attacks. Gain Privileges or Assume Identity. If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access. This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated. electron packager is a command line tool that packages Electron source code into APITAG and APITAG packages. along with Electron. The APITAG command line option in electron packager NUMBERTAG APITAG NUMBERTAG defaults to false if not explicitly set to true. This could allow an attacker to perform a man in the middle attack. APITAG NUMBERTAG to NUMBERTAG lacks TLS certificate verification if SSL_get_verify_result is relied upon for a later check of a verification result, in a use case where a user provided verification callback returns NUMBERTAG as demonstrated by acceptance of invalid certificates by nginx. DISPUTED An issue was discovered in RIPE NCC RPKI Validator NUMBERTAG before NUMBERTAG APITAG RRDP fetches proceed even with a lack of validation of a TLS HTTPS endpoint. This allows remote attackers to bypass intended access restrictions, or to trigger denial of service to traffic directed to co dependent routing systems. NOTE: third parties assert that the behavior is intentionally permitted by RFC NUMBERTAG. An issue was discovered in ssl.c in Axel before NUMBERTAG The TLS implementation lacks hostname verification. DISPUTED APITAG in APITAG NUMBERTAG through NUMBERTAG allows man in the middle attackers to bypass certificate pinning by changing APITAG and the boolean values while hooking the application. NOTE: This id is disputed because some parties don't consider this is a vulnerability. Their rationale can be found in URLTAG.",
    "CWE-311": "Missing Encryption of Sensitive Data. The software does not encrypt sensitive or critical information before storage or transmission. Read Application Data. If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server. Modify Application Data. Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys. Use of a Broken or Risky Cryptographic Algorithm. The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. Read Application Data. The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm. Modify Application Data. The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm. Hide Activities. If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven. The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm. Cleartext Storage of Sensitive Information. The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. Read Application Data. An attacker with access to the system could read sensitive information stored in cleartext. Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Cleartext Transmission of Sensitive Information. The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. Read Application Data. Modify Files or Directories. Anyone can read the information by gaining access to the channel being used for communication. Many communication channels can be sniffed by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers. Sensitive Cookie in HTTPS Session Without 'Secure' Attribute. The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session. Read Application Data. null. APITAG controllers across firmware versions NUMBERTAG and before do not encrypt or protect in any way the intellectual property artifacts installed in the robots. This flaw allows attackers with access to the robot or the robot network (while in combination with other flaws) to retrieve and easily exfiltrate all installed intellectual property and data. Universal Robots control box CB NUMBERTAG across firmware versions (tested on NUMBERTAG and NUMBERTAG does not encrypt or protect in any way the intellectual property artifacts installed from the UR+ platform of hardware and software components APITAG These files ( .urcaps) are stored under PATHTAG as plain zip files containing all the logic to add functionality to the UR3, UR5 and UR NUMBERTAG robots. This flaw allows attackers with access to the robot or the robot network (while in combination with other flaws) to retrieve and easily exfiltrate all installed intellectual property. APITAG Tools APITAG Generator before NUMBERTAG APITAG NUMBERTAG uses http:// URLs in various APITAG APITAG and FILETAG files, which may have caused insecurely resolved dependencies. arrow kt Arrow before NUMBERTAG resolved Gradle build artifacts (for compiling and building the published JARs) over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by an MITM attack. wixtoolset is a Node module wrapper around the wixtoolset binaries wixtoolset downloads binary resources over HTTP, which leaves it vulnerable to MITM attacks. It may be possible to cause remote code execution (RCE) by swapping out the requested resources with an attacker controlled copy if the attacker is on the network or positioned in between the user and the remote server.",
    "CWE-362": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'). The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Resource Consumption (Other). When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400). DoS. Crash, Exit, or Restart. DoS. Instability. When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash. Read Files or Directories. Read Application Data. When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59). This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider. A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an interfering code sequence can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single x++ statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x). The interfering code sequence could be trusted or untrusted. A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program. Improper Synchronization. The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes. Modify Application Data. Read Application Data. Alter Execution Logic. Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc. Signal Handler Race Condition. The software uses a signal handler that introduces a race condition. Modify Application Data. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data. Gain Privileges or Assume Identity. If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe. Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity). Race Condition within a Thread. If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined. Alter Execution Logic. Unexpected State. The main problem is that -- if a lock is overcome -- data could be altered in a bad state. null. Time-of-check Time-of-use (TOCTOU) Race Condition. The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. Alter Execution Logic. Unexpected State. The attacker can gain access to otherwise unauthorized resources. Modify Application Data. Modify Files or Directories. Modify Memory. Other. Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question. Other. The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user. Hide Activities. If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur. Other. In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files. This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs. Context Switching Race Condition. A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch. Modify Application Data. Read Application Data. This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain. Race Condition During Access to Alternate Channel. The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors. Gain Privileges or Assume Identity. Bypass Protection Mechanism. This creates a race condition that allows an attacker to access the channel before the authorized user does. Race Condition for Write-Once Attributes. A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue. Bypass Protection Mechanism. System configuration cannot be programmed in a secure way. Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware. Hardware Logic Contains Race Conditions. A race condition in the hardware logic results in undermining security guarantees of the system. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Alter Execution Logic. A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections. Permission Race Condition During Resource Copy. The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place. Read Application Data. Modify Application Data. null. UNIX Symbolic Link (Symlink) Following. The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access. The uv_rwlock_t fallback implementation for Windows XP and Server NUMBERTAG in libuv before NUMBERTAG does not properly prevent threads from releasing the locks of other threads, which allows attackers to cause a denial of service (deadlock) or possibly have unspecified other impact by leveraging a race condition. yadm (yet another dotfile manager NUMBERTAG has a race condition (related to the behavior of git commands in setting permissions for new files and directories), which potentially allows access to SSH and PGP keys. Gogs through NUMBERTAG allows attackers to violate the admin specified repo creation policy due to an PATHTAG race condition. An issue was discovered in webargs before NUMBERTAG as used with marshmallow and other products. JSON parsing uses a short lived cache to store the parsed JSON body. This cache is not thread safe, meaning that incorrect JSON payloads could have been parsed for concurrent requests. The package APITAG before NUMBERTAG insecurely uses the lock_file and log_file. Both of these are temporary, but it allows the starting user to overwrite any file they have access to.",
    "CWE-908": "Use of Uninitialized Resource. The software uses or accesses a resource that has not been initialized. Read Memory. Read Application Data. When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party. DoS. Crash, Exit, or Restart. The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend. When a resource has not been properly initialized, the software may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the software. Missing Initialization of Resource. The software does not initialize a critical resource. Read Memory. Read Application Data. When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party. DoS. Crash, Exit, or Restart. The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend. Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values. Use of Uninitialized Variable. The code uses a variable that has not been initialized, leading to unpredictable or unintended results. Other. Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can pre-initialize the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not. Other. Strings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string. In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code. In YARA NUMBERTAG bytecode in a specially crafted compiled rule can read uninitialized data from VM scratch memory in libyara/exec.c. This can allow attackers to discover addresses in the real stack (not the YARA virtual stack). Embedthis APITAG before NUMBERTAG mishandles redirected HTTP requests with a large Host header. The APITAG APITAG uses a static host buffer that has a limited length and can overflow. This can cause a copy of the Host header to fail, leaving that buffer uninitialized, which may leak uninitialized data in a response. APITAG before NUMBERTAG has a \"use of uninitialized value\" vulnerability in the function APITAG in coders/cut.c. An issue was discovered in the memoffset crate before NUMBERTAG for Rust. offset_of and span_of can cause exposure of uninitialized memory. APITAG NUMBERTAG and earlier is affected by: CVETAG : Use of Uninitialized Variable. The impact is: Unexpected control flow, crashes, and segfaults. The component is: APITAG APITAG The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit URLTAG.",
    "CWE-185": "Incorrect Regular Expression. The software specifies a regular expression in a way that causes data to be improperly matched or compared. Unexpected State. Varies by Context. When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors. Bypass Protection Mechanism. In PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses. When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data. Overly Restrictive Regular Expression. A regular expression is overly restrictive, which prevents dangerous values from being detected. Bypass Protection Mechanism. This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not complex but the value 9 is not matched when maybe the programmer planned to check for it. Permissive Regular Expression. The product uses a regular expression that does not sufficiently restrict the set of allowed values. Bypass Protection Mechanism. This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others. Inefficient Regular Expression Complexity. The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles. DoS. Resource Consumption (CPU). LIKELIHOOD. High. Some regular expression engines have a feature called backtracking. If the token cannot match, the engine backtracks to a position that may result in a different token that can match. Backtracking becomes a weakness if all of these conditions are met: The number of possible backtracking attempts are exponential relative to the length of the input. The input can fail to match the regular expression. The input can be long enough. Attackers can create crafted inputs that intentionally cause the regular epression to use excessive backtracking in a way that causes the CPU consumption to spike. Collapse of Data into Unsafe Value. The software filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property. Bypass Protection Mechanism. null. Partial String Comparison. The software performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses. Alter Execution Logic. Bypass Protection Mechanism. For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password. DISPUTED An issue was discovered in OWASP APITAG Core Rule Set (CRS) through NUMBERTAG rules/REQUEST NUMBERTAG APPLICATION ATTACK APITAG allows remote attackers to cause a denial of service APITAG by entering a specially crafted string with next at the beginning and nested repetition operators. NOTE: the software maintainer disputes that this is a vulnerability because the issue cannot be exploited via APITAG. DISPUTED An issue was discovered in OWASP APITAG Core Rule Set (CRS) through NUMBERTAG rules/REQUEST NUMBERTAG APPLICATION ATTACK APITAG allows remote attackers to cause a denial of service APITAG by entering a specially crafted string with set_error_handler at the beginning and nested repetition operators. NOTE: the software maintainer disputes that this is a vulnerability because the issue cannot be exploited via APITAG. DISPUTED An issue was discovered in OWASP APITAG Core Rule Set (CRS) through NUMBERTAG rules/REQUEST NUMBERTAG APPLICATION ATTACK APITAG allows remote attackers to cause a denial of service APITAG by entering a specially crafted string with nested repetition operators. NOTE: the software maintainer disputes that this is a vulnerability because the issue cannot be exploited via APITAG. An issue was discovered in OWASP APITAG Core Rule Set (CRS) through NUMBERTAG rules/REQUEST NUMBERTAG APPLICATION ATTACK APITAG allows remote attackers to cause a denial of service APITAG by entering a specially crafted string with nested repetition operators. An issue was discovered in FILETAG (aka APITAG in UA Parser UAP Core before NUMBERTAG A Regular Expression Denial of Service APITAG issue allows remote attackers to overload a server by setting the User Agent header in an HTTP(S) request to a value containing a long digit string. APITAG UAP Core project contains the vulnerability, propagating to all implementations.).",
    "CWE-444": "Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling'). When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to smuggle a request to one device without the other device being aware of it. Unexpected State. Hide Activities. Bypass Protection Mechanism. An attacker could create a request to exploit a number of weaknesses including 1) the request can trick the web server to associate a URL with another URLs webpage and caching the contents of the webpage (web cache poisoning attack), 2) the request can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the request can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack). null. APITAG in Netty before NUMBERTAG allows a Content Length header to be accompanied by a second Content Length header, or by a Transfer Encoding header. Netty APITAG allows HTTP Request Smuggling because it mishandles Transfer Encoding whitespace (such as a APITAG Encoding:chunked line) and a later Content Length header. This issue exists because of an incomplete fix for CVETAG . agoo prior to NUMBERTAG allows request smuggling attacks where agoo is used as a backend and a frontend proxy also being vulnerable. HTTP pipelining issues and request smuggling attacks might be possible due to incorrect Content Length and Transfer encoding header parsing. It is possible to conduct HTTP request smuggling attacks where agoo is used as part of a chain of backend servers due to insufficient APITAG and Transfer Encoding parsing. Netty before APITAG mishandles whitespace before the colon in HTTP headers (such as a APITAG Encoding : chunked\" line), which leads to HTTP request smuggling. APITAG in Netty before NUMBERTAG allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an \"invalid fold.\".",
    "CWE-203": "Observable Discrepancy. The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not. Read Application Data. Bypass Protection Mechanism. An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system. Read Application Data. When cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case. Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel. Observable Response Discrepancy. The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere. Read Application Data. Bypass Protection Mechanism. This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design). Observable Behavioral Discrepancy. The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality. Read Application Data. Bypass Protection Mechanism. Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel. Observable Timing Discrepancy. Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not. Read Application Data. Bypass Protection Mechanism. In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel. Improper Protection Against Physical Side Channels. The product is missing protections or implements insufficient protections against information leakage through physical channels such as power consumption, electromagnetic emissions (EME), acoustic emissions, or other physical attributes. Read Memory. Read Application Data. Physical properties of the hardware implementation such as power consumption or EME can result in data disclosure even if it is not possible to extract the information in the digital domain. Physical side channels such as power consumption, electromagnetic emissions (EME), and acoustic emissions have been well-studied for decades in the context of breaking implementations of cryptographic algorithms. These side-channels may be easily observed by an attacker with physical access to the device. Power, EME, and acoustic measurements obtained during hardware operation are correlated to data processed by the hardware, enabling recovery of secret keys and data. Non-Transparent Sharing of Microarchitectural Resources. Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts. Read Application Data. Read Memory. Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory. Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer\u2019s view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context. Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel. If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure. The Reset Password feature in Pagekit NUMBERTAG gives a different response depending on whether the e mail address of a valid user account is entered, which might make it easier for attackers to enumerate accounts.",
    "CWE-116": "Improper Encoding or Escaping of Output. The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. Modify Application Data. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Execute Unauthorized Code or Commands. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Bypass Protection Mechanism. The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted. Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, GET /index.html HTTP/1.1 is a structured message containing a command (GET) with a single argument (/index.html) and metadata about which protocol version is being used (HTTP/1.1). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly. Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'). The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. Read Application Data. Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation. Bypass Protection Mechanism. In some cases, injectable code controls authentication; this may lead to a remote vulnerability. Alter Execution Logic. Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code. Other. Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Hide Activities. Often the actions performed by injected control code are unlogged. Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. Improper Output Neutralization for Logs. The software does not neutralize or incorrectly neutralizes output that is written to logs. Modify Application Data. Hide Activities. Execute Unauthorized Code or Commands. Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility. This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file. Inappropriate Encoding for Output Context. The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component. Modify Application Data. Execute Unauthorized Code or Commands. An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands. This weakness can cause the downstream component to use a decoding method that produces different data than what the software intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the software. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks. While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output. For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding. While web applications have received the most attention for this problem, this weakness could potentially apply to any type of software that uses a communications stream that could support multiple encodings. Improper Neutralization of HTTP Headers for Scripting Syntax. The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash. Execute Unauthorized Code or Commands. Run arbitrary code. Read Application Data. Attackers may be able to obtain sensitive information. An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled. If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account. PATHTAG in APITAG before NUMBERTAG lacks certain parameter sanitization, as demonstrated by accepting control characters in a user name. An Improper Output Neutralization for Logs flaw was found in Ansible when using the uri module, where sensitive data is exposed to content and json output. This flaw allows an attacker to access the logs or outputs of performed tasks to read keys used in playbooks from other users within the uri module. The highest threat from this vulnerability is to data confidentiality. All Xtext & Xtend versions prior to NUMBERTAG were built using HTTP instead of HTTPS file transfer and thus the built artifacts may have been compromised.",
    "CWE-682": "Incorrect Calculation. The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. DoS. Crash, Exit, or Restart. If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. If the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400). Gain Privileges or Assume Identity. In the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources. Bypass Protection Mechanism. If the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code. When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution. Wrap-around Error. Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. Incorrect Calculation of Buffer Size. The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data. null. Incorrect Calculation of Multi-Byte String Length. The software does not correctly calculate the length of strings that can contain wide or multi-byte characters. Execute Unauthorized Code or Commands. This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. null. Integer Overflow or Wraparound. The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc. Integer Underflow (Wrap or Wraparound). The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. This can happen in signed and unsigned cases. Off-by-one Error. A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. Divide By Zero. The product divides a value by zero. DoS. Crash, Exit, or Restart. A Divide by Zero results in a crash. This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height. Incorrect Pointer Scaling. In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled. Read Memory. Modify Memory. Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read. null. Use of Pointer Subtraction to Determine Size. The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk. Modify Memory. Read Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. There is the potential for arbitrary code execution with privileges of the vulnerable program. null. Incorrect Conversion between Numeric Types. When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. Unexpected State. Quality Degradation. The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability. null. Improper Null Termination. The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. Read Memory. Execute Unauthorized Code or Commands. The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code. DoS. Crash, Exit, or Restart. Read Memory. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could. cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer. Modify Memory. DoS. Crash, Exit, or Restart. Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory. Alter Execution Logic. Execute Unauthorized Code or Commands. Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code. Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible. Numeric Range Comparison Without Minimum Check. The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum. Modify Application Data. Execute Unauthorized Code or Commands. An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands. DoS. Resource Consumption (Other). in some contexts, a negative value could lead to resource consumption. Modify Memory. Read Memory. If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer. Some programs use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption. The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account. Use of sizeof() on a Pointer Type. The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated. Modify Memory. Read Memory. This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows. The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug. A floating point exception was discovered in APITAG in p_lx_elf.cpp in UP NUMBERTAG The vulnerability causes an application crash, which leads to denial of service. ngiflib NUMBERTAG has a heap based buffer overflow in APITAG in ngiflib.c when called from APITAG because deinterlacing for small pictures is mishandled. When APITAG NUMBERTAG processes a crafted file in convert, it can lead to a Floating Point Exception (FPE) in the APITAG function in coders/palm.c, related to an incorrect bits per pixel calculation. ffjpeg.dll in ffjpeg before NUMBERTAG allows remote attackers to cause a denial of service (FPE signal) via a progressive JPEG file that lacks an AC Huffman table. A bug in the standard library APITAG implementation of curve P NUMBERTAG for amd NUMBERTAG architectures in Go before NUMBERTAG and NUMBERTAG before NUMBERTAG causes incorrect results to be generated for specific input points. An adaptive attack can be mounted to progressively extract the scalar input to APITAG by submitting crafted points and observing failures to the derive correct output. This leads to a full key recovery attack against static ECDH, as used in popular JWT libraries.",
    "CWE-668": "Exposure of Resource to Wrong Sphere. The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource. Read Application Data. Modify Application Data. Other. Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files. A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system. In either case, the end result is that a resource has been exposed to the wrong party. Exposure of Sensitive Information to an Unauthorized Actor. The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. Read Application Data. There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been scrubbed or sanitized a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an information exposure, but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information. Insecure Temporary File. Creating and using insecure temporary files can leave application and system data vulnerable to attack. Read Files or Directories. Modify Files or Directories. null. Transmission of Private Resources into a New Sphere ('Resource Leak'). The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software. Read Application Data. null. Insufficiently Protected Credentials. The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. Gain Privileges or Assume Identity. An attacker could gain access to user accounts and access sensitive data used by the user accounts. null. External Control of Critical State Data. The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors. Bypass Protection Mechanism. Gain Privileges or Assume Identity. An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges. Read Application Data. The state variables may contain sensitive information that should not be known by the client. DoS. Crash, Exit, or Restart. By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition. If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an authenticated=true cookie. An attacker may simply create this cookie in order to bypass the authentication. Incorrect Permission Assignment for Critical Resource. The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. Read Application Data. Read Files or Directories. An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file. Gain Privileges or Assume Identity. An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse. Modify Application Data. Other. An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database. When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data. Unintended Proxy or Intermediary ('Confused Deputy'). The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. Gain Privileges or Assume Identity. Hide Activities. Execute Unauthorized Code or Commands. If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources. Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. Use of Externally-Controlled Format String. The software uses a function that accepts a format string as an argument, but the format string originates from an external source. Read Memory. Format string problems allow for information disclosure which can severely simplify exploitation of the program. Modify Memory. Execute Unauthorized Code or Commands. Format string problems can result in the execution of arbitrary code. When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability. Passing Mutable Objects to an Untrusted Method. The program sends non-cloned mutable data as an argument to a method or function. Modify Memory. Potentially data could be tampered with by another function which should not have been tampered with. The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution. Returning a Mutable Object to an Untrusted Caller. Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function. Modify Memory. Potentially data could be tampered with by another function which should not have been tampered with. In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state. Uncontrolled Search Path Element. The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. Execute Unauthorized Code or Commands. Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element. Unquoted Search Path or Element. The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. Execute Unauthorized Code or Commands. If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec. Exposure of Data Element to Wrong Session. The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session. Read Application Data. Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition. Use of Cache Containing Sensitive Information. The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere. Read Application Data. Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information. Files or Directories Accessible to External Parties. The product makes files or directories accessible to unauthorized actors, even though they should not be. Read Files or Directories. Modify Files or Directories. Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. Improper Isolation of Shared Resources on System-on-a-Chip (SoC). The product does not properly isolate shared resources between trusted and untrusted agents. Bypass Protection Mechanism. If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user. Quality Degradation. The functionality of the shared resource may be intentionally degraded. A System-On-a-Chip (SoC) has a lot of functionality, but may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents. Assumed-Immutable Data is Stored in Writable Memory. Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field. Varies by Context. Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified. Binding to an Unrestricted IP Address. The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely. DoS. Amplification. LIKELIHOOD. High. When a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network. J2EE Misconfiguration: Entity Bean Declared Remote. When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities. Read Application Data. Modify Application Data. null. Public cloneable() Method Without Final ('Object Hijack'). A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state. Unexpected State. Varies by Context. null. Use of Inner Class Containing Sensitive Data. Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers. Read Application Data. Inner Classes data confidentiality aspects can often be overcome. Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields. Critical Public Variable Without Final Modifier. The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values. Modify Application Data. The object could potentially be tampered with. Read Application Data. The object could potentially allow the object to be read. If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field. Cloneable Class Containing Sensitive Information. The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class. Bypass Protection Mechanism. A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed. Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor. Serializable Class Containing Sensitive Data. The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class. Read Application Data. an attacker can write out the class to a byte stream, then extract the important data from it. Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it. Array Declared Public, Final, and Static. The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified. Modify Application Data. Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug. finalize() Method Declared Public. The program violates secure coding principles for mobile code by declaring a finalize() method public. Alter Execution Logic. Execute Unauthorized Code or Commands. Modify Application Data. A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access. Struts: Non-private Field in ActionForm Class. An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter. Modify Application Data. Read Application Data. null. Access to Critical Private Variable via Public Method. The software defines a public method that reads or modifies a private variable. Modify Application Data. Other. If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks. Use of Implicit Intent for Sensitive Communication. The Android application uses an implicit intent for transmitting sensitive data to other applications. Read Application Data. Other applications, possibly untrusted, can read the data that is offered through the Intent. Varies by Context. The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions. Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky. Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain. Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents. In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI. Permissive Cross-domain Policy with Untrusted Domains. The software uses a cross-domain policy file that includes domains that should not be trusted. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. Varies by Context. An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. A cross-domain policy file (crossdomain.xml in Flash and clientaccesspolicy.xml in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made. Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many cases, the attack can be launched without the victim even being aware of it. A race condition flaw was found in Ansible Engine NUMBERTAG and prior NUMBERTAG and prior NUMBERTAG and prior when running a playbook with an unprivileged become user. When Ansible needs to run a module with become user, the temporary directory is created in /var/tmp. This directory is created with \"umask NUMBERTAG mkdir p APITAG \"; this operation does not fail if the directory already exists and is owned by another user. An attacker could take advantage to gain control of the become user as the target directory can be retrieved by iterating PATHTAG. APITAG NUMBERTAG and earlier does not use /tmp in safe way, allowing local users to exploit this to tamper with cache files belonging to other users. Cacti NUMBERTAG allows remote authenticated administrators to conduct Remote Code Execution attacks by placing the Log Path under the web root, and then making a FILETAG request containing PHP code in a Client ip header. Pomelo NUMBERTAG allows external control of critical state data. A malicious user input can corrupt arbitrary methods and attributes in PATHTAG because certain internal attributes can be overwritten via a conflicting name. Hence, a malicious attacker can manipulate internal attributes by adding additional attributes to user input. APITAG APITAG and other APITAG robots use the Robot Operating System (ROS) default packages exposing the computational graph to all network interfaces, wireless and wired. This is the result of a bad set up and can be mitigated by appropriately configuring ROS and/or applying custom patches as appropriate. Currently, the ROS computational graph can be accessed fully from the wired exposed ports. In combination with other flaws such as CVETAG , the computation graph can also be fetched and interacted from wireless networks. This allows a malicious operator to take control of the ROS logic and correspondingly, the complete robot given that APITAG operations are centered around the framework (ROS).",
    "CWE-367": "Time-of-check Time-of-use (TOCTOU) Race Condition. The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. Alter Execution Logic. Unexpected State. The attacker can gain access to otherwise unauthorized resources. Modify Application Data. Modify Files or Directories. Modify Memory. Other. Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question. Other. The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user. Hide Activities. If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur. Other. In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files. This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs. Race Condition Enabling Link Following. The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. Read Files or Directories. Modify Files or Directories. While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks. Race Condition in Switch. The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior. Alter Execution Logic. Unexpected State. This weakness may lead to unexpected system state, resulting in unpredictable behavior. This issue is particularly important in the case of switch statements that involve fall-through style case statements - i.e., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption. Symbolic Name not Mapping to Correct Object. A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time. Gain Privileges or Assume Identity. The attacker can gain access to otherwise unauthorized resources. Modify Application Data. Modify Files or Directories. Read Application Data. Read Files or Directories. Other. Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question. Modify Application Data. Other. The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user. Hide Activities. If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur. Modify Files or Directories. In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files. null. Double-Checked Locking. The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. Modify Application Data. Alter Execution Logic. Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block. A Time of check Time of use (TOCTOU) Race Condition exists in APITAG through NUMBERTAG as a session remains active for an authenticated user even after deletion from the users table. This allows a nonexistent user to access and modify records (add/delete Monitors, Users, etc.). A TOCTOU issue in the chownr package before NUMBERTAG for FILETAG NUMBERTAG could allow a local attacker to trick it into descending into unintended directories via symlink attacks.",
    "CWE-59": "Improper Link Resolution Before File Access ('Link Following'). The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. Read Files or Directories. Modify Files or Directories. Bypass Protection Mechanism. An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism. Execute Unauthorized Code or Commands. Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a .LNK file can be uploaded like a normal file. This can enable remote execution. null. External Control of File Name or Path. The software allows user input to control or influence paths or file names that are used in filesystem operations. Read Files or Directories. Modify Files or Directories. The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker. Modify Files or Directories. Execute Unauthorized Code or Commands. The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects. This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker. Race Condition Enabling Link Following. The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. Read Files or Directories. Modify Files or Directories. While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks. UNIX Symbolic Link (Symlink) Following. The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access. UNIX Hard Link. The software, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process. Windows Shortcut Following (.LNK). The software, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access. Windows Hard Link. The software, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Read Files or Directories. Modify Files or Directories. Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data. systemd tmpfiles in systemd before NUMBERTAG attempts to support ownership/permission changes on hardlinked files even if the fs.protected_hardlinks sysctl is turned off, which allows local users to bypass intended access restrictions via vectors involving a hard link to a file for which the user lacks write access, as demonstrated by changing the ownership of the /etc/passwd file. A malicious guest compromised before a container creation (e.g. a malicious guest image or a guest running multiple containers) can trick the kata runtime into mounting the untrusted container filesystem on any host path, potentially allowing for code execution on the host. This issue affects: Kata Containers NUMBERTAG ersions earlier than NUMBERTAG Kata Containers NUMBERTAG ersions earlier than NUMBERTAG Kata Containers NUMBERTAG and earlier versions. opentmpfiles through NUMBERTAG allows local users to take ownership of arbitrary files because d entries are mishandled and allow a symlink attack. APITAG opentmpfiles through NUMBERTAG when the fs.protected_hardlinks sysctl is turned off, allows local users to obtain ownership of arbitrary files by creating a hard link inside a directory on which \"chown R\" will be run. In Kubernetes versions NUMBERTAG and prior to versions NUMBERTAG and NUMBERTAG containers using subpath volume mounts with any volume type (including non privileged pods, subject to file permissions) can access files/directories outside of the volume, including the host's filesystem.",
    "CWE-264": "The APITAG method in the Network class in PATHTAG in Blueman before NUMBERTAG allows local users to gain privileges via the dhcp_handler argument. lshell NUMBERTAG allows remote authenticated users to break out of a limited shell and execute arbitrary commands. The lxd APITAG systemd unit file in the Ubuntu lxd package before NUMBERTAG ubuntu NUMBERTAG uses world readable permissions for PATHTAG which allows local users to gain privileges via unspecified vectors. The check_privileges method in PATHTAG in APITAG as used in Red Hat APITAG Management Engine (CFME), allows remote authenticated users to bypass authorization and gain privileges by leveraging improper RBAC checking, related to the rbac_user_edit action. The kamcmd administrative utility and default configuration in kamailio before NUMBERTAG use /tmp/kamailio_ctl. lshell NUMBERTAG allows remote authenticated users to break out of a limited shell and execute arbitrary commands. An improper authorization check in the User API in APITAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows users with read only or read/write access to escalate their privileges to the administrator's privileges. This affects PATHTAG. In kubelet NUMBERTAG and NUMBERTAG containers for pods that do not specify an explicit APITAG attempt to run as uid NUMBERTAG root) on container restart, or if the image was previously pulled to the node. If the pod specified APITAG true, the kubelet will refuse to start the container as root. If the pod did not specify APITAG true, the kubelet will run the container as uid NUMBERTAG. Bubblewrap before NUMBERTAG sets the PR_SET_DUMPABLE flag, which might allow local users to gain privileges by attaching to the process, as demonstrated by sending commands to a APITAG socket. Untrusted search path vulnerability in Go before NUMBERTAG and NUMBERTAG before NUMBERTAG on Windows allows local users to gain privileges via a Trojan horse DLL in the current working directory, related to use of the APITAG function. APITAG through NUMBERTAG in Tencent Habo allows attackers to evade dynamic malware analysis via PIE compilation. attic before NUMBERTAG does not confirm unencrypted backups with the user, which allows remote attackers with read and write privileges for the encrypted repository to obtain potentially sensitive information by changing the manifest type byte of the repository to \"unencrypted / without key file\". Thinkst Canarytokens through commit hash NUMBERTAG e NUMBERTAG ee NUMBERTAG relies on limited variation in size, metadata, and timestamp, which makes it easier for attackers to estimate whether a Word document contains a token. cmdlineopts.clp in grml debootstrap in Debian NUMBERTAG before NUMBERTAG before NUMBERTAG is sourced without checking that the local directory is writable by non root users. Openshift allows remote attackers to gain privileges by updating a build configuration that was created with an allowed type to a type that is not allowed.",
    "CWE-255": "The lynx gem before NUMBERTAG for Ruby places the configured password on command lines, which allows local users to obtain sensitive information by listing processes. APITAG and APITAG devices have a hardcoded password for the root account, which makes it easier for remote attackers to obtain access via an SSH session. openshift node in APITAG Origin NUMBERTAG and earlier improperly stores router credentials as envvars in the pod when the credentials option is used, which allows local users to obtain sensitive private key information by reading the systemd journal. The \"lost password\" functionality in b2evolution before NUMBERTAG allows remote attackers to reset arbitrary user passwords via a crafted request.",
    "CWE-189": "The set_fat function in fat.c in dosfstools before NUMBERTAG might allow attackers to corrupt a FAT NUMBERTAG filesystem or cause a denial of service (invalid memory read and crash) by writing an odd number of clusters to the third to last entry on a FAT NUMBERTAG filesystem, which triggers an \"off by two error.\". Integer overflow in the getnum function in lua_struct.c in Redis NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows context dependent attackers with permission to run Lua code in a Redis session to cause a denial of service (memory corruption and application crash) or possibly bypass intended sandbox restrictions via a large number, which triggers a stack based buffer overflow. njs through NUMBERTAG used in NGINX, has a segmentation fault in APITAG for negative arguments, related to nxt_utf8_next in nxt/nxt_utf8.h and njs_string_offset in njs/njs_string.c.",
    "CWE-331": "Insufficient Entropy. The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others. Bypass Protection Mechanism. Other. An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization. null. Insufficient Entropy in PRNG. The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat. DoS. Crash, Exit, or Restart. If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash. Bypass Protection Mechanism. Other. If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users. null. Improper Handling of Insufficient Entropy in TRNG. True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block. DoS. Crash, Exit, or Restart. A program may crash or block if it runs out of random numbers. The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security. reset.php in APITAG NUMBERTAG uses insufficient entropy for password reset requests, leading to account takeover. Eran Hammer cryptiles version NUMBERTAG earlier contains a CVETAG : Insufficient Entropy vulnerability in APITAG method that can result in An attacker is more likely to be able to brute force something that was supposed to be random.. This attack appear to be exploitable via Depends upon the calling application.. This vulnerability appears to have been fixed in NUMBERTAG. Lemur NUMBERTAG does not use sufficient entropy in its IV when encrypting AES in CBC mode.",
    "CWE-134": "Use of Externally-Controlled Format String. The software uses a function that accepts a format string as an argument, but the format string originates from an external source. Read Memory. Format string problems allow for information disclosure which can severely simplify exploitation of the program. Modify Memory. Execute Unauthorized Code or Commands. Format string problems can result in the execution of arbitrary code. When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability. Write-what-where Condition. Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. Modify Memory. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. DoS. Crash, Exit, or Restart. Bypass Protection Mechanism. Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. DoS. Crash, Exit, or Restart. Modify Memory. Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process. Bypass Protection Mechanism. Other. When the consequence is arbitrary code execution, this can often be used to subvert any other security service. null. H2O versions NUMBERTAG and earlier and NUMBERTAG and earlier allows remote attackers to cause a denial of service APITAG via format string specifiers in a template file via fastcgi, mruby, proxy, redirect or reproxy. Ruby before NUMBERTAG and NUMBERTAG is vulnerable to a malicious format string which contains a precious specifier ( ) with a huge minus value. Such situation can lead to a buffer overrun, resulting in a heap memory corruption or an information disclosure from the heap. In the yajl ruby gem NUMBERTAG for Ruby, when a crafted JSON file is supplied to APITAG the whole ruby process crashes with a SIGABRT in the yajl_string_decode function in yajl_encode.c. This results in the whole ruby process terminating and potentially a denial of service. APITAG NUMBERTAG has a format string vulnerability in udisks_log in udiskslogging.c, allowing attackers to obtain sensitive information (stack contents), cause a denial of service (memory corruption), or possibly have unspecified other impact via a malformed filesystem label, as demonstrated by %d or %n substrings. fmtlib version prior to version NUMBERTAG before commit APITAG contains a Memory corruption (SIGSEGV), CVETAG vulnerability in APITAG library function that can result in Denial of Service. This attack appear to be exploitable via Specifying an invalid format specifier in the APITAG function results in a SIGSEGV (memory corruption, invalid write). This vulnerability appears to have been fixed in after commit APITAG.",
    "CWE-17": "The APITAG module in tqdm versions NUMBERTAG and NUMBERTAG allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory. Cloud Foundry Cloud Controller, capi release versions prior to NUMBERTAG and cf release versions prior to NUMBERTAG contain a business logic flaw. An application developer may create an application with a route that conflicts with a platform service route and receive traffic intended for the service.",
    "CWE-118": "Incorrect Access of Indexable Resource ('Range Error'). The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files. Varies by Context. null. Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. H2O version NUMBERTAG and earlier allows remote attackers to cause a denial of service in the server via unspecified vectors.",
    "CWE-319": "Cleartext Transmission of Sensitive Information. The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. Read Application Data. Modify Files or Directories. Anyone can read the information by gaining access to the channel being used for communication. Many communication channels can be sniffed by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers. Unprotected Storage of Credentials. Storing a password in plaintext may result in a system compromise. Gain Privileges or Assume Identity. Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. J2EE Misconfiguration: Data Transmission Without Encryption. Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted. Read Application Data. Modify Application Data. null. An unintended cleartext issue exists in Go before NUMBERTAG and NUMBERTAG before NUMBERTAG RFC NUMBERTAG requires that, during SMTP, the PLAIN auth scheme must only be used on network connections secured with TLS. The original implementation of APITAG in Go NUMBERTAG enforced this requirement, and it was documented to do so. In NUMBERTAG upstream issue NUMBERTAG this was changed so that the server may decide whether PLAIN is acceptable. The result is that if you set up a man in the middle SMTP server that doesn't advertise STARTTLS and does advertise that PLAIN auth is OK, the APITAG implementation sends the username and password.",
    "CWE-338": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG). The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. Bypass Protection Mechanism. If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality. When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography. Ratpack versions before NUMBERTAG generate a session ID using a cryptographically weak PRNG in the JDK's APITAG This means that if an attacker can determine a small window for the server start time and obtain a session ID value, they can theoretically determine the sequence of session IDs. The miekg Go DNS package before NUMBERTAG as used in APITAG before NUMBERTAG and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries. A class generated by the Generator in APITAG before NUMBERTAG and APITAG Kotlin through NUMBERTAG produces code that uses an insecure source of randomness APITAG APITAG This allows an attacker (if able to obtain their own password reset URL) to compute the value for all other password resets for other accounts, thus allowing privilege escalation or account takeover. An issue was discovered in Rclone before NUMBERTAG Due to the use of a weak random number generator, the password generator has been producing weak passwords with much less entropy than advertised. The suggested passwords depend deterministically on the time the second rclone was started. This limits the entropy of the passwords enormously. These passwords are often used in the crypt backend for encryption of data. It would be possible to make a dictionary of all possible passwords with about NUMBERTAG million entries per password length. This would make decryption of secret material possible with a plausible amount of effort. NOTE: all passwords generated by affected versions should be changed. It was discovered that APITAG before NUMBERTAG when using the built in password generator, generates possibly predictable and enumerable passwords. This only applies to the APITAG GUI.",
    "CWE-532": "Insertion of Sensitive Information into Log File. Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information. Read Application Data. Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information. While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers. Different log files may be produced and stored for: Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords. log files that are used for debugging. Sensu, Inc. Sensu Core version Before NUMBERTAG before commit APITAG contains a CVETAG vulnerability in APITAG that can result in sensitive configuration data (e.g. passwords) may be logged in clear text. This attack appear to be exploitable via victims with configuration matching a specific pattern will observe sensitive data outputted in their service log files. This vulnerability appears to have been fixed in NUMBERTAG and later, after commit APITAG. In Kubernetes clusters using a logging level of at least NUMBERTAG processing a malformed docker config file will result in the contents of the docker config file being leaked, which can include pull secrets or other registry credentials. This affects NUMBERTAG. In Kubernetes, if the logging level is set to at least NUMBERTAG authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects NUMBERTAG alpha2. Ansible, versions NUMBERTAG before NUMBERTAG before NUMBERTAG and Ansible versions NUMBERTAG before NUMBERTAG is not respecting the flag no_log set it to True when Sumologic and Splunk callback plugins are used send tasks results events to collectors. This would discloses and collects any sensitive data. In Kubernetes clusters using Ceph RBD as a storage provisioner, with logging level of at least NUMBERTAG Ceph RBD admin secrets can be written to logs. This occurs in kube controller manager's logs during provisioning of Ceph RBD persistent claims. This affects NUMBERTAG.",
    "CWE-399": "An issue was discovered in QPDF before NUMBERTAG Endless recursion causes stack exhaustion in APITAG in APITAG related to the QPDF::resolve function in QPDF.cc. PATHTAG in remarkable NUMBERTAG allows Regular Expression Denial of Service APITAG via a CDATA section. Crypto NUMBERTAG incorrectly uses Microsoft's stack based _malloca and _freea functions. The library will request a block of memory to align a table in memory. If the table is later reallocated, then the wrong pointer could be freed. tcprewrite in tcpreplay before NUMBERTAG allows remote attackers to cause a denial of service (segmentation fault) via a large frame, a related issue to CVETAG . libarchive before NUMBERTAG does not limit the number of recursive decompressions, which allows remote attackers to cause a denial of service (memory consumption and application crash) via a crafted gzip file. Hawk before NUMBERTAG and NUMBERTAG before NUMBERTAG allow remote attackers to cause a denial of service (CPU consumption or partial outage) via a long NUMBERTAG header or NUMBERTAG URI that is matched against an improper regular expression. DISPUTED The kex_input_kexinit function in kex.c in APITAG NUMBERTAG and NUMBERTAG through NUMBERTAG allows remote attackers to cause a denial of service (memory consumption) by sending many duplicate KEXINIT requests. NOTE: a third party reports that APITAG upstream does not consider this as a security issue.\". The APITAG function in gd_interpolation.c in the GD Graphics Library (aka libgd) before NUMBERTAG as used in PHP before NUMBERTAG uses inconsistent allocate and free approaches, which allows remote attackers to cause a denial of service (memory consumption) via a crafted call, as demonstrated by a call to the PHP imagescale function. The Management plugin in APITAG before NUMBERTAG allows remote authenticated users with certain privileges to cause a denial of service (resource consumption) via the NUMBERTAG lengths_age or NUMBERTAG lengths_incr parameter. The riot compiler version version NUMBERTAG has an issue in a regex APITAG Backtracking) thats make it unusable under certain conditions. An issue was discovered in the Tatsuya Kinoshita w3m fork before NUMBERTAG w3m allows remote attackers to cause a denial of service (infinite loop and resource consumption) via a crafted HTML page. The jpc_dec_tiledecode function in jpc_dec.c in APITAG before NUMBERTAG allows remote attackers to cause a denial of service (assertion failure) via a crafted file. Memory leak in the APITAG function in APITAG in APITAG before NUMBERTAG as used in ODR APITAG and other products, allows attackers to trigger memory consumption.",
    "CWE-347": "Improper Verification of Cryptographic Signature. The software does not verify, or incorrectly verifies, the cryptographic signature for data. Gain Privileges or Assume Identity. Modify Application Data. Execute Unauthorized Code or Commands. An attacker could gain access to sensitive data and possibly execute unauthorized code. null. perl CRYPT JWT NUMBERTAG and earlier is affected by: Incorrect Access Control. The impact is: bypass authentication. The component is: JWT.pm for JWT security token, line NUMBERTAG in APITAG The attack vector is: network connectivity(crafting user controlled input to bypass authentication). The fixed version is NUMBERTAG. The Keybase app NUMBERTAG for iOS provides potentially insufficient notice that it is employing a user's private key to sign a certain cryptocurrency attestation (that an address at keybase.io can be used for Stellar payments to the user), which might be incompatible with a user's personal position on the semantics of an attestation. APITAG from version NUMBERTAG and before version NUMBERTAG allows block proposers to include signatures for the wrong block. This may happen naturally if you start a network, have it run for some time and restart it ( without changing APITAG ). A malicious block proposer (even with a minimal amount of stake) can use this vulnerability to completely halt the network. This issue is fixed in Tendermint NUMBERTAG which checks all the signatures are for the block with NUMBERTAG majority before creating a commit. An issue was discovered in the jsrsasign package through NUMBERTAG for FILETAG . It allows a malleability in ECDSA signatures by not checking overflows in the length of a sequence and NUMBERTAG characters appended or prepended to an integer. The modified signatures are verified as valid. This could have a security relevant impact if an application relied on a single canonical signature. APITAG in the APITAG (aka p5 Crypt Perl) module before NUMBERTAG for Perl fails to verify correct ECDSA signatures when r and s are small and when s NUMBERTAG This happens when using the curve secp NUMBERTAG r1 (prime NUMBERTAG This could conceivably have a security relevant impact if an attacker wishes to use public r and s values when guessing whether signature verification will fail.",
    "CWE-77": "Improper Neutralization of Special Elements used in a Command ('Command Injection'). The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. Execute Unauthorized Code or Commands. If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed. Command injection vulnerabilities typically occur when: 1. Data enters the application from an untrusted source. 2. The data is part of a string that is executed as a command by the application. 3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. Command injection is a common problem with wrapper programs. Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. Read Files or Directories. Modify Files or Directories. Read Application Data. Modify Application Data. Hide Activities. Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'). The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. Execute Unauthorized Code or Commands. Alter Execution Logic. Read Application Data. Modify Application Data. An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior. When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences. Executable Regular Expression Error. The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers. Execute Unauthorized Code or Commands. Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression. Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection'). The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. Read Application Data. Execute Unauthorized Code or Commands. null. The festivaltts4r gem for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a string to the NUMBERTAG to_speech or NUMBERTAG to_mp3 method in PATHTAG. dns sync is a sync/blocking dns resolver. If untrusted user input is allowed into the APITAG method then command injection is possible. Directory traversal vulnerability in file APITAG in Zikula NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG on Windows allows a remote attacker to launch a PHP object injection by uploading a serialized file. A remote code execution vulnerability occurs in APITAG through NUMBERTAG ia command injection in the yrange parameter. The yrange value is written to a gnuplot file in the /tmp directory. This file is then executed via the FILETAG shell script. APITAG attempted to prevent command injections by blocking backticks but this is insufficient.).",
    "CWE-281": "Improper Preservation of Permissions. The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended. Read Application Data. Modify Application Data. null. In Cacti before NUMBERTAG disabling a user account does not immediately invalidate any permissions granted to that account (e.g., permission to view logs).",
    "CWE-763": "Release of Invalid Pointer or Reference. The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761. Free of Pointer not at Start of Buffer. The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. This can cause the application to crash, or in some cases, modify critical program variables or execute code. This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer. Mismatched Memory Management Routines. The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. This weakness can be generally described as mismatching memory management routines, such as: The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory. The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator. When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed. An issue was discovered in USC APITAG cereal through NUMBERTAG It employs caching of std::shared_ptr values, using the raw pointer address as a unique identifier. This becomes problematic if an std::shared_ptr variable goes out of scope and is freed, and a new std::shared_ptr is allocated at the same address. Serialization fidelity thereby becomes dependent upon memory layout. In short, serialized std::shared_ptr variables cannot always be expected to serialize back into their original values. This can have any number of consequences, depending on the context within which this manifests. An issue was discovered in libgpac.a in GPAC before NUMBERTAG as demonstrated by APITAG It contains an invalid pointer dereference in gf_odf_delete_descriptor in odf/desc_private.c that can cause a denial of service via a crafted MP4 file. An issue was discovered in GPAC version NUMBERTAG and NUMBERTAG development NUMBERTAG There is an invalid pointer dereference in the function APITAG in odf/ipmpx_code.c. An issue was discovered in libgpac.a in GPAC before NUMBERTAG as demonstrated by APITAG It contains an invalid pointer dereference in gf_list_count in utils/list.c that can cause a denial of service via a crafted MP4 file.",
    "CWE-428": "Unquoted Search Path or Element. The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. Execute Unauthorized Code or Commands. If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec. Untrusted Search Path. The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. There is the potential for arbitrary code execution with privileges of the vulnerable program. DoS. Crash, Exit, or Restart. The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format. Read Files or Directories. The program could send the output of unauthorized files to the attacker. This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order. On Windows the Veyon Service before version NUMBERTAG contains an unquoted service path vulnerability, allowing locally authenticated users with administrative privileges to run malicious executables with APITAG privileges. Since Veyon users (both students and teachers) usually don't have administrative privileges, this vulnerability is only dangerous in anyway unsafe setups. The problem has been fixed in version NUMBERTAG As a workaround, the exploitation of the vulnerability can be prevented by revoking administrative privileges from all potentially untrustworthy users.",
    "CWE-436": "Interpretation Conflict. Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state. Unexpected State. Varies by Context. This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave. Misinterpretation of Input. The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion. Unexpected State. null. Incomplete Model of Endpoint Features. A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model. Unexpected State. Varies by Context. null. Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling'). When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to smuggle a request to one device without the other device being aware of it. Unexpected State. Hide Activities. Bypass Protection Mechanism. An attacker could create a request to exploit a number of weaknesses including 1) the request can trick the web server to associate a URL with another URLs webpage and caching the contents of the webpage (web cache poisoning attack), 2) the request can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the request can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack). null. Insufficient Type Distinction. The software does not properly distinguish between different types of elements in a way that leads to insecure behavior. Other. null. Unrestricted Upload of File with Dangerous Type. The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. Execute Unauthorized Code or Commands. Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system. null. Improper Neutralization of Invalid Characters in Identifiers in Web Pages. The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers. Read Application Data. Execute Unauthorized Code or Commands. Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks. Null Byte Interaction Error (Poison Null Byte). The product does not properly handle null bytes or NUL characters when passing data between different representations or components. Unexpected State. A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected. The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP. Trusting HTTP Permission Methods on the Server Side. The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state. Gain Privileges or Assume Identity. An attacker could escalate privileges. Modify Application Data. An attacker could modify resources. Read Application Data. An attacker could obtain sensitive information. The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request. Go before NUMBERTAG and NUMBERTAG before NUMBERTAG can panic upon an attempt to process network traffic containing an invalid DSA public key. There are several attack scenarios, such as traffic from a client to a server that verifies client certificates.",
    "CWE-706": "Use of Incorrectly-Resolved Name or Reference. The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere. Read Application Data. Modify Application Data. null. Improper Control of Resource Identifiers ('Resource Injection'). The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control. Read Application Data. Modify Application Data. Read Files or Directories. Modify Files or Directories. An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information. A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources. Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. Improper Resolution of Path Equivalence. The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object. Read Files or Directories. Modify Files or Directories. Bypass Protection Mechanism. An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism. Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object. Improper Link Resolution Before File Access ('Link Following'). The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. Read Files or Directories. Modify Files or Directories. Bypass Protection Mechanism. An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism. Execute Unauthorized Code or Commands. Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a .LNK file can be uploaded like a normal file. This can enable remote execution. null. Improper Handling of File Names that Identify Virtual Resources. The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file. Other. Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories. Improper Handling of Case Sensitivity. The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results. Bypass Protection Mechanism. Improperly handled case sensitive data can lead to several possible consequences, including: case-insensitive passwords reducing the size of the key space, making brute force attacks easier bypassing filters or access controls using alternate names multiple interpretation errors using alternate names. Symbolic Name not Mapping to Correct Object. A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time. Gain Privileges or Assume Identity. The attacker can gain access to otherwise unauthorized resources. Modify Application Data. Modify Files or Directories. Read Application Data. Read Files or Directories. Other. Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question. Modify Application Data. Other. The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user. Hide Activities. If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur. Modify Files or Directories. In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files. null. Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. Improper Control of Document Type Definition. The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker. Read Files or Directories. If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities. As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content. For example, the SOAP specification prohibits SOAP messages from containing DTDs. Envoy NUMBERTAG and before does not normalize HTTP URL paths. A remote attacker may craft a relative path, e.g., PATHTAG to bypass access control, e.g., a block on /admin. A backend server could then interpret the non normalized path and provide an attacker access beyond the scope provided for by the access control policy. runc through NUMBERTAG rc9 has Incorrect Access Control leading to Escalation of Privileges, related to libcontainer/rootfs_linux.go. To exploit this, an attacker must be able to spawn two containers with custom volume mount configurations, and be able to run custom images. APITAG vulnerability does not affect Docker due to an implementation detail that happens to block the attack.).",
    "CWE-326": "Inadequate Encryption Strength. The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. Bypass Protection Mechanism. Read Application Data. An attacker may be able to decrypt the data using brute force attacks. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources. Weak Encoding for Password. Obscuring a password with a trivial encoding does not protect the password. Gain Privileges or Assume Identity. Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password. Reversible One-Way Hash. The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques. Bypass Protection Mechanism. This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication. The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes gcm) when the IV is set before the key, which makes it easier for context dependent attackers to bypass the encryption protection mechanism. The Bitwarden server through NUMBERTAG has a potentially unwanted KDF. APITAG in FILETAG in APITAG NUMBERTAG relies on multiple MD5 operations for password hashing. The str_rot_pass function in PATHTAG in PHP Proxy NUMBERTAG uses weak cryptography, which makes it easier for attackers to calculate the authorization data needed for local file inclusion. In Bitcoin Core NUMBERTAG bitcoin qt stores wallet.dat data unencrypted in memory. Upon a crash, it may dump a core file. If a user were to mishandle a core file, an attacker can reconstruct the user's wallet.dat file, including their private keys, via a grep NUMBERTAG command.",
    "CWE-193": "Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Off-by-one Error. A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. null. Reachable Assertion. The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. DoS. Crash, Exit, or Restart. An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session. While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service. Improper Null Termination. The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. Read Memory. Execute Unauthorized Code or Commands. The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code. DoS. Crash, Exit, or Restart. Read Memory. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could. cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer. Modify Memory. DoS. Crash, Exit, or Restart. Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory. Alter Execution Logic. Execute Unauthorized Code or Commands. Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code. Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible. APITAG NUMBERTAG Q NUMBERTAG has a stack based buffer overflow at coders/pnm.c in APITAG because of off by one errors. SSDP Responder NUMBERTAG through NUMBERTAG mishandles incoming network messages, leading to a stack based buffer overflow by NUMBERTAG byte. This results in a crash of the server, but only when strict stack checking is enabled. This is caused by an off by one error in ssdp_recv in ssdpd.c.",
    "CWE-88": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'). The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. Execute Unauthorized Code or Commands. Alter Execution Logic. Read Application Data. Modify Application Data. An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior. When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences. Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. Read Files or Directories. Modify Files or Directories. Read Application Data. Modify Application Data. Hide Activities. Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. Go before NUMBERTAG and NUMBERTAG before NUMBERTAG allows Argument Injection. PATHTAG in the rustls crate before NUMBERTAG for Rust allows attackers to cause a denial of service (loop of conn_event and ready) by arranging for a client to never be writable. A flaw was found in Ansible Engine when the module package or service is used and the parameter 'use' is not specified. If a previous task is executed with a malicious user, the module sent can be selected by the attacker using the ansible facts file. All versions in NUMBERTAG and NUMBERTAG branches are believed to be vulnerable.",
    "CWE-1236": "Improper Neutralization of Formula Elements in a CSV File. The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software. Read Application Data. Execute Unauthorized Code or Commands. LIKELIHOOD. Low. Current versions of Excel warn users of untrusted content. User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software. DISPUTED CSV Injection (aka Excel Macro Injection or Formula Injection) in PATHTAG in APITAG NUMBERTAG a and earlier allows remote attackers to exfiltrate sensitive data and to execute arbitrary code via a value that is mishandled in a CSV export. NOTE: the vendor has stated \"this is not a security problem in APITAG. Alkacon APITAG NUMBERTAG and before is affected by CSV (aka Excel Macro) Injection in the module New User ( PATHTAG ) via the First Name or Last Name.",
    "CWE-191": "Integer Underflow (Wrap or Wraparound). The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Instability. This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high. Modify Memory. If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. This can happen in signed and unsigned cases. An issue was discovered in The Sleuth Kit (TSK NUMBERTAG There is an off by one overwrite due to an underflow on PATHTAG while using a bogus hash table. An integer underflow has been identified in the APITAG function in tnef NUMBERTAG This might lead to invalid write operations, controlled by an attacker.",
    "CWE-307": "Improper Restriction of Excessive Authentication Attempts. The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks. Bypass Protection Mechanism. An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account. null. onefilecms.php in APITAG through NUMBERTAG might allow attackers to conduct brute force attacks via the onefilecms_username and onefilecms_password fields. APITAG in APITAG through NUMBERTAG does not restrict sending a series of APITAG and APITAG parameters, which might make it easier for remote attackers to obtain access via a brute force approach. A vulnerability in the Gleez CMS NUMBERTAG login page could allow an unauthenticated, remote attacker to perform multiple user enumerations, which can further help an attacker to perform login attempts in excess of the configured login attempt limit. The vulnerability is due to insufficient server side access control and login attempt limit enforcement. An attacker could exploit this vulnerability by sending modified login attempts to the Portal login page. An exploit could allow the attacker to identify existing users and perform brute force password attacks on the Portal, as demonstrated by navigating to the user NUMBERTAG URI. Plataformatec Devise version NUMBERTAG and earlier, using the lockable module contains a CVETAG vulnerability in The APITAG class, more specifically at the APITAG method. File location: PATHTAG that can result in Multiple concurrent requests can prevent an attacker from being blocked on brute force attacks. This attack appear to be exploitable via Network connectivity brute force attacks. This vulnerability appears to have been fixed in NUMBERTAG and later. In Sorcery before NUMBERTAG there is a brute force vulnerability when using password authentication via Sorcery. The brute force protection submodule will prevent a brute force attack for the defined lockout period, but once expired, protection will not be re enabled until a user or malicious actor logs in successfully. This does not affect users that do not use the built in brute force protection submodule, nor users that use permanent account lockout. This has been patched in NUMBERTAG.",
    "CWE-330": "Use of Insufficiently Random Values. The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers. Other. When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key. Bypass Protection Mechanism. Other. If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application. Bypass Protection Mechanism. Gain Privileges or Assume Identity. When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key. When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information. Generation of Predictable Numbers or Identifiers. The product uses a scheme that generates numbers or identifiers that are more predictable than required. Varies by Context. null. Insufficient Entropy. The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others. Bypass Protection Mechanism. Other. An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization. null. Small Space of Random Values. The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks. Bypass Protection Mechanism. Other. An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization. null. Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG). The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds. Bypass Protection Mechanism. Other. if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization. null. Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG). The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. Bypass Protection Mechanism. If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality. When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography. Use of Invariant Value in Dynamically Changing Context. The product uses a constant value, name, or reference, but this value can (or should) vary across different environments. Varies by Context. null. Guessable CAPTCHA. The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor. Bypass Protection Mechanism. Other. When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA. An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated that with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA. Generation of Weak Initialization Vector (IV). The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive. Read Application Data. If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179]. By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves. Use of Predictable Algorithm in Random Number Generator. The device uses an algorithm that is predictable and generates a pseudo-random number. Read Application Data. LIKELIHOOD. High. null. Python package pysaml2 version NUMBERTAG and earlier reuses the initialization vector across encryptions in the IDP server, resulting in weak encryption of data. Anomali Agave (formerly Drupot) through NUMBERTAG fails to avoid fingerprinting by including predictable data and minimal variation in size within HTML templates, giving attackers the ability to detect and avoid this system. PATHTAG PATHTAG and PATHTAG in kaptcha NUMBERTAG use the Random (rather than APITAG function for generating CAPTCHA values, which makes it easier for remote attackers to bypass intended access restrictions via a brute force approach. An issue was discovered in supplementary Go cryptography libraries, aka golang googlecode go crypto, before NUMBERTAG A flaw was found in the amd NUMBERTAG implementation of PATHTAG and PATHTAG If more than NUMBERTAG APITAG of keystream is generated, or if the counter otherwise grows greater than NUMBERTAG bits, the amd NUMBERTAG implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.",
    "CWE-327": "Use of a Broken or Risky Cryptographic Algorithm. The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. Read Application Data. The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm. Modify Application Data. The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm. Hide Activities. If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven. The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm. Missing Encryption of Sensitive Data. The software does not encrypt sensitive or critical information before storage or transmission. Read Application Data. If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server. Modify Application Data. Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys. Reversible One-Way Hash. The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques. Bypass Protection Mechanism. This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication. Use of Password Hash With Insufficient Computational Effort. The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive. Bypass Protection Mechanism. Gain Privileges or Assume Identity. If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes. Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash. Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker. There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack: The amount of CPU time required to compute the hash (stretching) The amount of memory required to compute the hash (memory-hard operations) Including a random value, along with the password, as input to the hash computation (salting) Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (one-way hashing) Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (collision resistance) Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack. Use of a Risky Cryptographic Primitive. This device implements a cryptographic algorithm using a non-standard or unproven cryptographic primitive. Read Application Data. LIKELIHOOD. High. Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case. Cryptographic algorithms (or Cryptographic systems) depend on cryptographic primitives as their basic building blocks. As a result, cryptographic primitives are designed to do one very specific task in a precisely defined and highly reliable fashion. For example, one can declare that a specific crypto primitive (like an encryption routine) can only be broken after trying out N different inputs (the larger the value of N, the stronger the crypto). If a vulnerability is found that leads to breaking this primitive in significantly less than N attempts, then the specific cryptographic primitive is considered broken, and the entirety of the cryptographic algorithm (or the cryptographic system) is now considered insecure. Thus, even breaking a seemingly small cryptographic primitive is sufficient to render the whole system vulnerable. Cryptographic primitives are products of extensive reviews from cryptographers, industry, and government entities looking for any possible flaws. However, over time even well-known cryptographic primitives lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that such implementations will be vulnerable to attacks resulting in the exposure of sensitive information and other consequences. Observable Timing Discrepancy. Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not. Read Application Data. Bypass Protection Mechanism. In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel. Use of RSA Algorithm without OAEP. The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption. Bypass Protection Mechanism. Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext. Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text. Reflection Attack in an Authentication Protocol. Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user. Gain Privileges or Assume Identity. The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user. A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user. DISPUTED An issue was discovered in Z APITAG NUMBERTAG APITAG relies on MD5 for the password parameter, which might make it easier for attackers to bypass intended access restrictions via a dictionary or rainbow table attack. NOTE: the vendor declined to accept this as a valid issue. The APITAG open source library APITAG APITAG before version NUMBERTAG has a vulnerability where encrypted data could potentially be decrypted without needing authentication. If the library is used to encrypt text and write the output to a txt file, another executable could be able to decrypt the text using the static method APITAG from this same library without the need to use Windows Hello Authentication again. This has been patched in version NUMBERTAG. Python RSA before NUMBERTAG ignores leading NUMBERTAG bytes during decryption of ciphertext. This could conceivably have a security relevant impact, e.g., by helping an attacker to infer that an application uses Python RSA, or if the length of accepted ciphertext affects application behavior (such as by causing excessive memory allocation). It was found that python rsa is vulnerable to Bleichenbacher timing attacks. An attacker can use this flaw via the RSA decryption API to decrypt parts of the cipher text encrypted with RSA.",
    "CWE-312": "Cleartext Storage of Sensitive Information. The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. Read Application Data. An attacker with access to the system could read sensitive information stored in cleartext. Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Unprotected Transport of Credentials. Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server. Gain Privileges or Assume Identity. null. Cleartext Storage in a File or on Disk. The application stores sensitive information in cleartext in a file, or on disk. Read Application Data. The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Cleartext Storage in the Registry. The application stores sensitive information in cleartext in the registry. Read Application Data. Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Cleartext Storage of Sensitive Information in a Cookie. The application stores sensitive information in cleartext in a cookie. Read Application Data. Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Cleartext Storage of Sensitive Information in Memory. The application stores sensitive information in cleartext in memory. Read Memory. The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it. It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness. Cleartext Storage of Sensitive Information in GUI. The application stores sensitive information in cleartext within the GUI. Read Memory. Read Application Data. An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. Cleartext Storage of Sensitive Information in Executable. The application stores sensitive information in cleartext in an executable. Read Application Data. Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. An information disclosure flaw was found in Grafana through NUMBERTAG The database directory PATHTAG and database file PATHTAG are world readable. This can result in exposure of sensitive information (e.g., cleartext or encrypted datasource passwords). In Centreon Web through NUMBERTAG disclosure of external components' passwords allows authenticated attackers to move laterally to external components. django celery results through NUMBERTAG stores task results in the database. Among the data it stores are the variables passed into the tasks. The variables may contain sensitive cleartext information that does not belong unencrypted in the database.",
    "CWE-184": "Incomplete List of Disallowed Inputs. The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses. Bypass Protection Mechanism. Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism. Overly Restrictive Regular Expression. A regular expression is overly restrictive, which prevents dangerous values from being detected. Bypass Protection Mechanism. This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not complex but the value 9 is not matched when maybe the programmer planned to check for it. Permissive Regular Expression. The product uses a regular expression that does not sufficiently restrict the set of allowed values. Bypass Protection Mechanism. This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others. Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Bypass Protection Mechanism. Read Application Data. The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also. Execute Unauthorized Code or Commands. In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. Read Files or Directories. Modify Files or Directories. Read Application Data. Modify Application Data. Hide Activities. Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. Unrestricted Upload of File with Dangerous Type. The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. Execute Unauthorized Code or Commands. Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system. null. Improper Neutralization of Invalid Characters in Identifiers in Web Pages. The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers. Read Application Data. Execute Unauthorized Code or Commands. Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks. Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. Monstra CMS through NUMBERTAG has an incomplete \"forbidden types\" list that excludes .php (and similar) file extensions but not the .pht or .phar extension, which allows remote authenticated Admins or Editors to execute arbitrary PHP code by uploading a file, a different vulnerability than CVETAG . APITAG jackson databind through NUMBERTAG and NUMBERTAG through NUMBERTAG allows unauthenticated remote code execution because of an incomplete fix for the CVETAG and CVETAG deserialization flaws. This is exploitable via two different gadgets that bypass a blacklist. DISPUTED SOFA Hessian through NUMBERTAG allows remote attackers to execute arbitrary commands via a crafted serialized Hessian object because blacklisting of APITAG and APITAG is mishandled, related to Resin Gadget. NOTE: The vendor doesn\u2019t consider this issue a vulnerability because the blacklist is being misused. SOFA Hessian supports custom blacklist and a disclaimer was posted encouraging users to update the blacklist or to use the whitelist feature for their specific needs since the blacklist is not being actively updated. APITAG jackson databind before NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows unauthenticated remote code execution because of an incomplete fix for the CVETAG deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the APITAG method of the APITAG bypassing a blacklist that is ineffective if the c3p0 libraries are available in the classpath.",
    "CWE-754": "Improper Check for Unusual or Exceptional Conditions. The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software. DoS. Crash, Exit, or Restart. Unexpected State. The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors. The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability. Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions. Unchecked Return Value. The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. Unexpected State. DoS. Crash, Exit, or Restart. An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors. Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges. Incorrect Check of Function Return Value. The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. Unexpected State. DoS. Crash, Exit, or Restart. An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors. Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function. Improper Check for Dropped Privileges. The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. Gain Privileges or Assume Identity. If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped. Gain Privileges or Assume Identity. Hide Activities. If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator. If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users. Improper Validation of Integrity Check Value. The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. Modify Application Data. Other. Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected. Other. Data that is parsed and used may be corrupted. Hide Activities. Other. Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent. Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences. Unexpected Status Code or Return Value. The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software. Unexpected State. Alter Execution Logic. null. NULL Pointer Dereference. A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. DoS. Crash, Exit, or Restart. NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution. NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions. APITAG cJSON NUMBERTAG is affected by: Improper Check for Unusual or Exceptional Conditions. The impact is: Null dereference, so attack can cause denial of service. The component is: APITAG function. The attack vector is: crafted json file. The fixed version is NUMBERTAG and later. An unhandled exception vulnerability exists during Google Sign In with Google API C++ Client before NUMBERTAG It potentially causes an outage of third party services that were not designed to recover from exceptions. On the client, ID token handling can cause an unhandled exception because of misinterpretation of an integer as a string, resulting in denial of service and then other users can no longer login/sign in to the affected third party service. Once this third party service uses Google Sign In with google api cpp client, a malicious user can trigger this PATHTAG vulnerability by requesting the client to receive the ID token from a Google authentication server.",
    "CWE-640": "Weak Password Recovery Mechanism for Forgotten Password. The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. Gain Privileges or Assume Identity. An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials. DoS. Resource Consumption (Other). An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users. Other. The system's security functionality is turned against the system by the attacker. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system. LTB (aka LDAP Tool Box) Self Service Password before NUMBERTAG allows a change to a user password (without knowing the old password) via a crafted POST request, because the ldap_bind return value is mishandled and the PHP data type is not constrained to be a string. ASP.NET Core NUMBERTAG and NUMBERTAG allow an elevation of privilege vulnerability due to how web applications that are created from templates validate web requests, aka \"ASP.NET Core Elevation Of Privilege Vulnerability\".",
    "CWE-417": "Crypto NUMBERTAG and earlier contains a timing side channel in ECDSA signature generation. This allows a local or remote attacker, able to measure the duration of hundreds to thousands of signing operations, to compute the private key used. The issue occurs because scalar multiplication in ecp.cpp (prime field curves, small leakage) and algebra.cpp (binary field curves, large leakage) is not constant time and leaks the bit length of the scalar among other information.",
    "CWE-669": "Incorrect Resource Transfer Between Spheres. The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource. Read Application Data. Modify Application Data. Unexpected State. null. Improper Removal of Sensitive Information Before Storage or Transfer. The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors. Read Files or Directories. Read Application Data. Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack. Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site. Unrestricted Upload of File with Dangerous Type. The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. Execute Unauthorized Code or Commands. Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system. null. Download of Code Without Integrity Check. The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. Execute Unauthorized Code or Commands. Alter Execution Logic. Other. Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit. Client-Side Enforcement of Server-Side Security. The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server. Bypass Protection Mechanism. DoS. Crash, Exit, or Restart. Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions. When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect. Inclusion of Functionality from Untrusted Control Sphere. The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere. Execute Unauthorized Code or Commands. An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site. When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601). Creation of chroot Jail Without Changing Working Directory. The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail. Read Files or Directories. Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called. Improper Clearing of Heap Memory Before Release ('Heap Inspection'). Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory. Read Memory. Other. Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use. When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a heap inspection attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed. In Eclipse Buildship versions prior to NUMBERTAG the build files indicate that this project is resolving dependencies over HTTP instead of HTTPS. Any of these artifacts could have been MITM to maliciously compromise them and infect the build artifacts that were produced. Additionally, if any of these JARs or other dependencies were compromised, any developers using these could continue to be infected past updating to fix this. Grails before NUMBERTAG used cleartext HTTP to resolve the APITAG notification service. NOTE: users' apps were not resolving dependencies over cleartext HTTP.",
    "CWE-843": "Improper Restriction of Operations within the Bounds of a Memory Buffer. The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Execute Unauthorized Code or Commands. Modify Memory. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator. Read Memory. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. Read Memory. In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash. Access of Resource Using Incompatible Type ('Type Confusion'). The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type. Read Memory. Modify Memory. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution. When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues. Improper Validation of Specified Type of Input. The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type. Varies by Context. When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type. APITAG in APITAG in Bento NUMBERTAG uses incorrect character data types, which causes a stack based buffer underflow and out of bounds write, leading to denial of service (application crash) or possibly unspecified other impact. UNSUPPORTED WHEN ASSIGNED An issue was discovered in the failure crate through NUMBERTAG for Rust. It has a type confusion flaw when downcasting. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
    "CWE-776": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'). The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities. DoS. Resource Consumption (Other). If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources. If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service. Improper Control of Document Type Definition. The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker. Read Files or Directories. If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities. As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content. For example, the SOAP specification prohibits SOAP messages from containing DTDs. Improper input validation in the Kubernetes API server in versions NUMBERTAG and versions prior to NUMBERTAG and NUMBERTAG allows authorized users to send malicious YAML or JSON payloads, causing the API server to consume excessive CPU or memory, potentially crashing and becoming unavailable. Prior to NUMBERTAG default RBAC policy authorized anonymous users to submit requests that could trigger this vulnerability. Clusters upgraded from a version prior to NUMBERTAG keep the more permissive policy by default for backwards compatibility.",
    "CWE-346": "User Interface (UI) Misrepresentation of Critical Information. The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks. Hide Activities. Bypass Protection Mechanism. If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the software or the environment the software is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the software is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. filename.txt .exe). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue. Origin Validation Error. The software does not properly verify that the source of data or communication is valid. Gain Privileges or Assume Identity. Varies by Context. An attacker can access any functionality that is inadvertently accessible to the source. null. Cross-Site Request Forgery (CSRF). The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Application Data. Modify Application Data. DoS. Crash, Exit, or Restart. The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. Session Fixation. Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. Gain Privileges or Assume Identity. Such a scenario is commonly observed when: A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session. Yii NUMBERTAG through NUMBERTAG actively converts a wildcard CORS policy into reflecting an arbitrary Origin header value, which is incompatible with the CORS security design, and could lead to CORS misconfiguration security problems. The Olivier Poitrey Go CORS handler through NUMBERTAG actively converts a wildcard CORS policy into reflecting an arbitrary Origin header value, which is incompatible with the CORS security design, and could lead to CORS misconfiguration security problems. APITAG Consul NUMBERTAG lacks server hostname verification for agent to agent TLS communication. In other words, the product behaves as if verify_server_hostname were set to false, even when it is actually set to true. This is fixed in NUMBERTAG. An issue was discovered in the APITAG Payments plugin through NUMBERTAG for APITAG Lack of origin authentication in the IPN callback processing function in FILETAG allows an attacker to remotely replace critical plugin settings (merchant ID, secret key, etc.) and therefore bypass the payment process (e.g., spoof an order status by manually sending an IPN callback request with a valid signature but without real payment) and/or receive all of the subsequent payments. An issue was discovered in the APITAG Payments plugin through NUMBERTAG for Magento NUMBERTAG Lack of origin authentication in the IPN callback processing function in PATHTAG allows an attacker to remotely replace critical plugin settings (merchant ID, secret key, etc.) and therefore bypass the payment process (e.g., spoof an order status by manually sending an IPN callback request with a valid signature but without real payment) and/or receive all of the subsequent payments.",
    "CWE-829": "Inclusion of Functionality from Untrusted Control Sphere. The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere. Execute Unauthorized Code or Commands. An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site. When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601). Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. Improper Control of Document Type Definition. The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker. Read Files or Directories. If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776). Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities. As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content. For example, the SOAP specification prohibits SOAP messages from containing DTDs. Inclusion of Web Functionality from an Untrusted Source. The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source. Execute Unauthorized Code or Commands. Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted. Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software. This weakness is common in mashup development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=http://other.domain.here>' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access. Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists. The paranoid2 gem NUMBERTAG for Ruby, as distributed on APITAG included a code execution backdoor inserted by a third party. The current version, without this backdoor, is NUMBERTAG.",
    "CWE-345": "Insufficient Verification of Data Authenticity. The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data. Varies by Context. Unexpected State. null. Improper Input Validation. The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU. Read Memory. Read Files or Directories. An attacker could read confidential data if they are able to control resource references. Modify Memory. Execute Unauthorized Code or Commands. An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. Origin Validation Error. The software does not properly verify that the source of data or communication is valid. Gain Privileges or Assume Identity. Varies by Context. An attacker can access any functionality that is inadvertently accessible to the source. null. Improper Verification of Cryptographic Signature. The software does not verify, or incorrectly verifies, the cryptographic signature for data. Gain Privileges or Assume Identity. Modify Application Data. Execute Unauthorized Code or Commands. An attacker could gain access to sensitive data and possibly execute unauthorized code. null. Use of Less Trusted Source. The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack. Bypass Protection Mechanism. Gain Privileges or Assume Identity. An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data. null. Acceptance of Extraneous Untrusted Data With Trusted Data. The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted. Bypass Protection Mechanism. Modify Application Data. An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data. null. Insufficient Type Distinction. The software does not properly distinguish between different types of elements in a way that leads to insecure behavior. Other. null. Missing Support for Integrity Check. The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum. Other. Data that is parsed and used may be corrupted. Hide Activities. Other. Without a checksum it is impossible to determine if any changes have been made to the data after it was sent. If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets. Improper Validation of Integrity Check Value. The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. Modify Application Data. Other. Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected. Other. Data that is parsed and used may be corrupted. Hide Activities. Other. Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent. Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences. Trust of System Event Data. Security based on event locations are insecure and can be spoofed. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity. Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages. Download of Code Without Integrity Check. The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. Execute Unauthorized Code or Commands. Alter Execution Logic. Other. Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit. Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking. The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified. Unexpected State. The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions. When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service. Improper Enforcement of Message Integrity During Transmission in a Communication Channel. The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission. Gain Privileges or Assume Identity. If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint. Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control. Missing Source Correlation of Multiple Independent Data. The software relies on one source of data, preventing the ability to detect if an adversary has compromised a data source. Read Application Data. Modify Application Data. Gain Privileges or Assume Identity. An attacker that may be able to execute a single Person-in-the-Middle attack can subvert a check of an external oracle (e.g. the ACME protocol check for a file on a website), and thus inject an arbitrary reply to the single perspective request to the external oracle. Software has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried. Improperly Implemented Security Check for Standard. The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique. Bypass Protection Mechanism. null. Incorrect Ownership Assignment. The software assigns an owner to a resource, but the owner is outside of the intended control sphere. Read Application Data. Modify Application Data. An attacker could read and modify data for which they do not have permissions to access directly. This may allow the resource to be manipulated by actors outside of the intended control sphere. Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation. The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation. DoS. Instability. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). Gain Privileges or Assume Identity. Bypass Protection Mechanism. Alter Execution Logic. Quality Degradation. Unexpected State. Reduce Maintainability. Reduce Performance. Reduce Reliability. LIKELIHOOD. High. Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. Cross-Site Request Forgery (CSRF). The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Application Data. Modify Application Data. DoS. Crash, Exit, or Restart. The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. Incomplete Identification of Uploaded File Variables (PHP). The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files. Read Files or Directories. Modify Files or Directories. These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as /etc/passwd. Reliance on File Name or Extension of Externally-Supplied File. The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion. Read Application Data. An attacker may be able to read sensitive data. DoS. Crash, Exit, or Restart. An attacker may be able to cause a denial of service. Gain Privileges or Assume Identity. An attacker may be able to gain privileges. An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a .php.gif extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself. APITAG in Privileged Helper Tool in Proxyman for APITAG NUMBERTAG and earlier allows an attacker to change the System Proxy and redirect all traffic to an attacker controlled computer, enabling MITM attacks. UR+ APITAG Robots+) is a platform of hardware and software component sellers, for Universal Robots robots. When installing any of these components in the robots (e.g. in the UR NUMBERTAG no integrity checks are performed. Moreover, the SDK for making such components can be easily obtained from Universal Robots. An attacker could exploit this flaw by crafting a custom component with the SDK, performing Person In The Middle attacks (PITM) and shipping the maliciously crafted component on demand. It was found that in icedtea web up to and including NUMBERTAG and NUMBERTAG executable code could be injected in a JAR file without compromising the signature verification. An attacker could use this flaw to inject code in a trusted JAR. The code would be executed inside the sandbox.",
    "CWE-425": "Direct Request ('Forced Browsing'). The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. Read Application Data. Modify Application Data. Execute Unauthorized Code or Commands. Gain Privileges or Assume Identity. Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path. Authentication Bypass Using an Alternate Path or Channel. A product requires authentication, but the product has an alternate path or channel that does not require authentication. Bypass Protection Mechanism. null. Modification of Assumed-Immutable Data (MAID). The software does not properly protect an assumed-immutable element from being modified by an attacker. Modify Application Data. Common data types that are attacked are environment variables, web application parameters, and HTTP headers. Unexpected State. This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups. Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'). The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions. Execute Unauthorized Code or Commands. The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers. In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP. APITAG NUMBERTAG allows remote attackers to edit other users' notes by navigating with a modified page_id. tianti NUMBERTAG allows remote authenticated users to bypass intended permission restrictions by visiting PATHTAG directly to read the column list page or edit a column. Prototype pollution vulnerability in dot prop npm package versions before NUMBERTAG and versions NUMBERTAG before NUMBERTAG allows an attacker to add arbitrary properties to APITAG language constructs such as objects.",
    "CWE-681": "Incorrect Calculation. The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. DoS. Crash, Exit, or Restart. If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). Execute Unauthorized Code or Commands. If the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400). Gain Privileges or Assume Identity. In the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources. Bypass Protection Mechanism. If the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code. When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution. Incorrect Conversion between Numeric Types. When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. Unexpected State. Quality Degradation. The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability. null. Numeric Truncation Error. Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. Modify Memory. The true value of the data is lost and corrupted data is used. When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred. Integer Coercion Error. Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). DoS. Crash, Exit, or Restart. Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes. Execute Unauthorized Code or Commands. In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code. Other. Integer coercion errors result in an incorrect value being stored for the variable in question. Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions. Unexpected Sign Extension. The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. Read Memory. Modify Memory. Other. When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range. null. Signed to Unsigned Conversion Error. The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. Unexpected State. Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities. It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program. Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition. Unsigned to Signed Conversion Error. The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive. DoS. Crash, Exit, or Restart. Incorrect sign conversions generally lead to undefined behavior, and therefore crashes. Modify Memory. If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy. Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic. The APITAG function in coders\\dcm.c in APITAG NUMBERTAG has an integer signedness error leading to excessive memory consumption via a crafted DCM file. Godot Engine version All versions prior to NUMBERTAG all NUMBERTAG ersions prior to NUMBERTAG contains a Signed/unsigned comparison, wrong buffer size chackes, integer overflow, missing padding initialization vulnerability in APITAG functions ( PATHTAG ) that can result in APITAG (packet of death), possible leak of uninitialized memory. This attack appear to be exploitable via A malformed packet is received over the network by a Godot application that uses built in serialization (e.g. game server, or game client). Could be triggered by multiplayer opponent. This vulnerability appears to have been fixed in NUMBERTAG master branch after commit APITAG. In libming NUMBERTAG there is an integer signedness error vulnerability (left shift of a negative value) in the APITAG function (util/read.c). Remote attackers can leverage this vulnerability to cause a denial of service via a crafted swf file.",
    "CWE-667": "Improper Locking. The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. DoS. Resource Consumption (CPU). Inconsistent locking discipline can lead to deadlock. Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc. Unrestricted Externally Accessible Lock. The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control. DoS. Resource Consumption (Other). When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock. This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent. Improper Resource Locking. The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource. Modify Application Data. DoS. Instability. DoS. Crash, Exit, or Restart. When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors. Missing Lock Check. A product does not check to see if a lock is present before performing sensitive operations on a resource. Modify Application Data. DoS. Instability. DoS. Crash, Exit, or Restart. null. Double-Checked Locking. The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. Modify Application Data. Alter Execution Logic. Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block. Multiple Locks of a Critical Resource. The software locks a critical resource more times than intended, leading to an unexpected state in the system. DoS. Resource Consumption (CPU). DoS. Crash, Exit, or Restart. Unexpected State. When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible. Multiple Unlocks of a Critical Resource. The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. DoS. Crash, Exit, or Restart. Modify Memory. Unexpected State. When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity. Unlock of a Resource that is not Locked. The software attempts to unlock a resource that is not locked. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Modify Memory. Other. Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur. Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks). Deadlock. The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Other). DoS. Crash, Exit, or Restart. Each thread of execution will hang and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop. null. Improper Lock Behavior After Power State Transition. Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable. Modify Memory. LIKELIHOOD. High. Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions. After a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable. Improper Hardware Lock Protection for Security Sensitive Controls. The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration. Modify Memory. System Configuration protected by the lock bit can be modified even when the lock is set. Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If any system registers/controls that can modify the protected configuration are not write-protected by the lock, they can then be leveraged by software to modify the protected configuration. Hardware Internal or Debug Modes Allow Override of Locks. System configuration protection may be bypassed during debug mode. Bypass Protection Mechanism. LIKELIHOOD. High. Bypass of lock bit allows access and modification of system configuration even when the lock bit is set. Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information. An issue was discovered in Gitea through NUMBERTAG An attacker can trigger a deadlock by initiating a transfer of a repository's ownership from one organization to another. An issue was discovered in APITAG NUMBERTAG In the PATHTAG file, there is no validation lock file in the Add method, which allows an attacker to reinstall the database. The attacker can write arbitrary code to FILETAG during system reinstallation. memcached version prior to NUMBERTAG contains an Integer Overflow vulnerability in APITAG that can result in data corruption and deadlocks due to items existing in hash table being reused from free list. This attack appear to be exploitable via network connectivity to the memcached service. This vulnerability appears to have been fixed in NUMBERTAG and later.",
    "CWE-755": "Improper Handling of Exceptional Conditions. The software does not handle or incorrectly handles an exceptional condition. Other. null. Not Failing Securely ('Failing Open'). When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions. Bypass Protection Mechanism. Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects. By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to fail functional to minimize administration and support costs, instead of failing safe. Generation of Error Message Containing Sensitive Information. The software generates an error message that includes sensitive information about its environment, users, or associated data. Read Application Data. Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server. The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query. Improper Handling of Insufficient Permissions or Privileges. The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state. Other. Alter Execution Logic. null. Detection of Error Condition Without Action. The software detects a specific error, but takes no actions to handle the error. Varies by Context. Unexpected State. Alter Execution Logic. An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior. null. Use of NullPointerException Catch to Detect NULL Pointer Dereference. Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer. DoS. Resource Consumption (CPU). Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable. Declaration of Catch for Generic Exception. Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. Hide Activities. Alter Execution Logic. Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention. Improper Cleanup on Thrown Exception. The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow. Varies by Context. The code could be left in a bad state. Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening. Missing Standardized Error Handling Mechanism. The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses. Quality Degradation. Unexpected State. Varies by Context. If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user. Missing Custom Error Page. The software does not return custom error pages to the user, possibly exposing sensitive information. Read Application Data. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application. null. Improper Handling of Single Event Upsets. The hardware logic does not effectively handle when single-event upsets (SEUs) occur. DoS. Crash, Exit, or Restart. DoS. Instability. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Technology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root. In APITAG NUMBERTAG Open through NUMBERTAG Open, the DTLS server mishandles incoming network messages leading to a heap based buffer overflow of up to NUMBERTAG bytes and possible Remote Code Execution in APITAG in APITAG During processing of a crafted packet, the server mishandles the fragment length value provided in the DTLS message. APITAG NUMBERTAG allows remote attackers to bypass the Web Application Firewall feature because there is no error handler (for get_uri_args or get_post_args) to block the API misuse described in CVETAG . The private_address_check ruby gem before NUMBERTAG is vulnerable to a bypass due to use of Ruby's APITAG method, which is OS dependent and should not be relied upon for security measures, such as when used to blacklist private network addresses to prevent server side request forgery. A Denial of Service issue was discovered in the LIVE NUMBERTAG Streaming Media libraries as used in Live NUMBERTAG Media Server NUMBERTAG It can cause an APITAG crash in APITAG when RTSP over HTTP tunneling is supported, via x sessioncookie HTTP headers in a GET request and a POST request within the same TCP session. This occurs because of a call to an incorrect virtual function pointer in the APITAG function in APITAG.",
    "CWE-252": "Unchecked Return Value. The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. Unexpected State. DoS. Crash, Exit, or Restart. An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors. Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges. Improper Check for Dropped Privileges. The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. Gain Privileges or Assume Identity. If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped. Gain Privileges or Assume Identity. Hide Activities. If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator. If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users. NULL Pointer Dereference. A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. DoS. Crash, Exit, or Restart. NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation. Execute Unauthorized Code or Commands. Read Memory. Modify Memory. In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution. NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions. The functions APITAG in coders/dcm.c, APITAG in coders/pwp.c, APITAG in coders/cals.c, and APITAG in coders/pict.c in APITAG NUMBERTAG do not check the return value of the fputc function, which allows remote attackers to cause a denial of service via a crafted image file. The decode program in silk NUMBERTAG decoder Version NUMBERTAG Build By kn NUMBERTAG does not strictly check data, resulting in a buffer overflow.",
    "CWE-824": "Access of Uninitialized Pointer. The program accesses or uses a pointer that has not been initialized. Read Memory. If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory. DoS. Crash, Exit, or Restart. If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed. Out-of-bounds Read. The software reads data past the end, or before the beginning, of the intended buffer. Read Memory. Bypass Protection Mechanism. By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results. Out-of-bounds Write. The software writes data past the end, or before the beginning, of the intended buffer. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. Typically, this can result in corruption of data, a crash, or code execution. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results. APITAG in pack_utils.c in libwavpack.a in APITAG through NUMBERTAG has a APITAG jump or move depends on uninitialised value\" condition, which might allow attackers to cause a denial of service (application crash) via a DFF file that lacks valid sample rate data. load_png in loader.c in libsixel.a in libsixel NUMBERTAG has an uninitialized pointer leading to an invalid call to free, which can cause a denial of service. The init_copy function in kernel.c in mruby NUMBERTAG makes initialize_copy calls for TT_ICLASS objects, which allows attackers to cause a denial of service (mrb_hash_keys uninitialized pointer and application crash) or possibly have unspecified other impact.",
    "CWE-610": "Externally Controlled Reference to a Resource in Another Sphere. The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere. Read Application Data. Modify Application Data. null. Unintended Proxy or Intermediary ('Confused Deputy'). The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. Gain Privileges or Assume Identity. Hide Activities. Execute Unauthorized Code or Commands. If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources. External Control of System or Configuration Setting. One or more system settings or configuration elements can be externally controlled by a user. Varies by Context. Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways. External Control of File Name or Path. The software allows user input to control or influence paths or file names that are used in filesystem operations. Read Files or Directories. Modify Files or Directories. The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker. Modify Files or Directories. Execute Unauthorized Code or Commands. The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code. DoS. Crash, Exit, or Restart. DoS. Resource Consumption (Other). The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects. This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker. Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'). The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code. Execute Unauthorized Code or Commands. Alter Execution Logic. The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state. DoS. Crash, Exit, or Restart. Other. The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the application to exit or hang. Read Application Data. By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536. If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application. URL Redirection to Untrusted Site ('Open Redirect'). A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. Bypass Protection Mechanism. Gain Privileges or Assume Identity. The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data. Bypass Protection Mechanism. Gain Privileges or Assume Identity. Other. The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site. An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Improper Restriction of XML External Entity Reference. The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. Read Application Data. Read Files or Directories. If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. Bypass Protection Mechanism. The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities. DoS. Resource Consumption (CPU). DoS. Resource Consumption (Memory). The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing. XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents. Symbolic Name not Mapping to Correct Object. A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time. Gain Privileges or Assume Identity. The attacker can gain access to otherwise unauthorized resources. Modify Application Data. Modify Files or Directories. Read Application Data. Read Files or Directories. Other. Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question. Modify Application Data. Other. The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user. Hide Activities. If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur. Modify Files or Directories. In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files. null. Session Fixation. Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. Gain Privileges or Assume Identity. Such a scenario is commonly observed when: A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session. The Kubernetes ingress nginx component prior to version NUMBERTAG allows a user with the ability to create namespaces and to read and create ingress objects to overwrite the password file of another ingress which uses APITAG type: basic and which has a hyphenated namespace or secret name.",
    "CWE-552": "Files or Directories Accessible to External Parties. The product makes files or directories accessible to unauthorized actors, even though they should not be. Read Files or Directories. Modify Files or Directories. Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. Storage of File with Sensitive Data Under Web Root. The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties. Read Application Data. Besides public-facing web pages and code, applications may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data. Storage of File With Sensitive Data Under FTP Root. The application stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties. Read Application Data. null. Exposure of Version-Control Repository to an Unauthorized Control Sphere. The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors. Read Application Data. Read Files or Directories. Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed diff data about how files have been changed - which could reveal source code snippets that were never intended to be made public. Exposure of Core Dump File to an Unauthorized Control Sphere. The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors. Read Application Data. Read Files or Directories. null. Exposure of Access Control List Files to an Unauthorized Control Sphere. The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere. Read Application Data. Bypass Protection Mechanism. Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched. Exposure of Backup File to an Unauthorized Control Sphere. A backup file is stored in a directory or archive that is made accessible to unauthorized actors. Read Application Data. At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site. Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator. Use of Persistent Cookies Containing Sensitive Information. The web application uses persistent cookies, but the cookies contain sensitive information. Read Application Data. Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed. Command Shell in Externally Accessible Directory. A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server. Execute Unauthorized Code or Commands. null. Roundcube Webmail before NUMBERTAG before NUMBERTAG and NUMBERTAG before NUMBERTAG allows unauthorized access to arbitrary files on the host's filesystem, including configuration files, as exploited in the wild in November NUMBERTAG The attacker must be able to authenticate at the target system with a valid username/password as the attack requires an active session. The issue is related to file based attachment plugins and _task=settings&_action=upload display&_from=timezone requests. Tenshi NUMBERTAG creates a tenshi.pid file after dropping privileges to a non root account, which might allow local users to kill arbitrary processes by leveraging access to this non root account for tenshi.pid modification before a root script executes a \"kill APITAG \" command. A flaw was found in Ansible Base when using the aws_ssm connection plugin as there is no namespace separation for file transfers. Files are written directly to the root bucket, making possible to have collisions when running multiple ansible processes. This issue affects mainly the service availability.",
    "NVD-CWE-Other": "Invalid Memory Access in APITAG at PATHTAG in Moddable SDK before OS NUMBERTAG causes a denial of service (SEGV). APITAG Desktop Client before NUMBERTAG does not call APITAG with the list of errors to be ignored, which allows man in the middle attackers to bypass the user's certificate distrust decision and obtain sensitive information by leveraging a self signed certificate and a connection to a server using its own self signed certificate. > APITAG CVETAG : Improper Validation of Certificate with Host Mismatch APITAG. Open redirect vulnerability in the serve static plugin before NUMBERTAG for FILETAG , when mounted at the root, allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a // (slash slash) followed by a domain in the PATH_INFO to the default URI. > APITAG CVETAG : URL Redirection to Untrusted Site APITAG Redirect') APITAG. The Kubernetes API Server component in versions NUMBERTAG and versions prior to NUMBERTAG and NUMBERTAG allows an authorized user who sends malicious YAML payloads to cause the kube apiserver to consume excessive CPU cycles while parsing YAML. Integer overflow in the gdk_cairo_set_source_pixbuf function in gdk/gdkcairo.c in GTK+ before NUMBERTAG as used in eom, gnome photos, eog, gambas3, thunar, pinpoint, and possibly other applications, allows remote attackers to cause a denial of service (crash) via a large image file, which triggers a large memory allocation. > APITAG CVETAG : Integer Overflow or Wraparound APITAG. Multiple Apple Mac OS NUMBERTAG applications might allow context dependent attackers to cause a denial of service (application crash) via a crafted APITAG (.exr) image file, which triggers the crash when opening a folder using Finder, displaying the image in Safari, or using Preview to open the file. In Anchore Engine version NUMBERTAG a specially crafted container image manifest, fetched from a registry, can be used to trigger a shell escape flaw in the anchore engine analyzer service during an image analysis process. The image analysis operation can only be executed by an authenticated user via a valid API request to anchore engine, or if an already added image that anchore is monitoring has its manifest altered to exploit the same flaw. A successful attack can be used to execute commands that run in the analyzer environment, with the same permissions as the user that anchore engine is run as including access to the credentials that Engine uses to access its own database which have read write ability, as well as access to the running engien analyzer service environment. By default Anchore Engine is released and deployed as a container where the user is non root, but if users run Engine directly or explicitly set the user to 'root' then that level of access may be gained in the execution environment where Engine runs. This issue is fixed in version NUMBERTAG. A denial of service via regular expression in the py. APITAG component of py (aka python py) through NUMBERTAG could be used by attackers to cause a compute time denial of service attack by supplying malicious input to the blame functionality. APITAG jackson databind NUMBERTAG before NUMBERTAG mishandles the interaction between serialization gadgets and typing, related to APITAG (aka caucho quercus). APITAG jackson databind NUMBERTAG before NUMBERTAG mishandles the interaction between serialization gadgets and typing, related to APITAG (aka APITAG. CRLF injection vulnerability in the on_req function in PATHTAG in H2O before NUMBERTAG and NUMBERTAG before NUMBERTAG allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via a crafted URI. > APITAG CVETAG : Improper Neutralization of CRLF Sequences ('CRLF Injection') APITAG. Invalid Memory Access in the APITAG function in PATHTAG in Moddable SDK before OS NUMBERTAG causes a denial of service (SEGV).",
    "CWE-114": "Process Control. Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. Execute Unauthorized Code or Commands. Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. osquery before version NUMBERTAG enables a privilege escalation vulnerability. If a Window system is configured with a PATH that contains a user writable directory then a local user may write a zlib1.dll DLL, which osquery will attempt to load. Since osquery runs with elevated privileges this enables local escalation. This is fixed in version NUMBERTAG.",
    "CWE-404": "Improper Resource Shutdown or Release. The program does not release or incorrectly releases a resource before it is made available for re-use. DoS. Resource Consumption (Other). Varies by Context. Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool. Read Application Data. When a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation. When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation. Asymmetric Resource Consumption (Amplification). Software that does not appropriately monitor or control resource consumption can lead to adverse system performance. DoS. Amplification. DoS. Resource Consumption (Other). Sometimes this is a factor in flood attacks, but other types of amplification exist. This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network. Not Using Password Aging. If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner. Gain Privileges or Assume Identity. As passwords age, the probability that they are compromised grows. Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach. Password Aging with Long Expiration. Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. Gain Privileges or Assume Identity. As passwords age, the probability that they are compromised grows. Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password. Improper Check for Certificate Revocation. The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised. Gain Privileges or Assume Identity. Trust may be assigned to an entity who is not who it claims to be. Other. Data from an untrusted (and possibly malicious) source may be integrated. Read Application Data. Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure. An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync. Incomplete Cleanup. The software does not properly clean up and remove temporary or supporting resources after they have been used. Other. Read Application Data. Modify Application Data. DoS. Resource Consumption (Other). It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem. null. Release of Invalid Pointer or Reference. The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. Modify Memory. DoS. Crash, Exit, or Restart. Execute Unauthorized Code or Commands. This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761. Missing Release of Resource after Effective Lifetime. The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. DoS. Resource Consumption (Other). An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource. When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc. Improper Scrubbing of Sensitive Data from Decommissioned Device. The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect. Read Memory. When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. scrubbing. Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data. Dangling Database Cursor ('Cursor Injection'). If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling. Read Application Data. Modify Application Data. For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible. Failure to Handle Incomplete Element. The software does not properly handle when a particular element is not completely specified. Varies by Context. Unexpected State. null. Grin before NUMBERTAG allows attackers to adversely affect availability of data on a Mimblewimble blockchain.",
    "CWE-427": "Uncontrolled Search Path Element. The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. Execute Unauthorized Code or Commands. Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element. Untrusted Search Path. The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. There is the potential for arbitrary code execution with privileges of the vulnerable program. DoS. Crash, Exit, or Restart. The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format. Read Files or Directories. The program could send the output of unauthorized files to the attacker. This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order. The seafile client client NUMBERTAG for Seafile is vulnerable to DLL hijacking because it loads exchndl.dll from the current working directory. Go through NUMBERTAG on Windows misuses certain APITAG functionality, leading to DLL injection.",
    "CWE-565": "Reliance on Cookies without Validation and Integrity Checking. The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. Gain Privileges or Assume Identity. It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level. Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways. Reliance on Cookies without Validation and Integrity Checking in a Security Decision. The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user. Bypass Protection Mechanism. Gain Privileges or Assume Identity. It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred. Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value. In Centreon VM through NUMBERTAG the cookie configuration within the Apache HTTP Server does not protect against theft because the APITAG flag is not set.",
    "CWE-320": "A flaw was found in Ansible before version NUMBERTAG The apt_key module does not properly verify key fingerprints, allowing remote adversary to create an APITAG key which matches the short key ID and inject this key instead of the correct key.",
    "CWE-494": "Download of Code Without Integrity Check. The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. Execute Unauthorized Code or Commands. Alter Execution Logic. Other. Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit. Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Bypass Protection Mechanism. Read Application Data. The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also. Execute Unauthorized Code or Commands. In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. Execute Unauthorized Code or Commands. Bypass Protection Mechanism. Read Application Data. The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running Active X controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content. Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. Akeo Consulting Rufus prior to version NUMBERTAG does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code.",
    "CWE-521": "Weak Password Requirements. The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. Gain Privileges or Assume Identity. An attacker could easily guess user passwords and gain access user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism. Empty Password in Configuration File. Using an empty string as a password is insecure. Gain Privileges or Assume Identity. null. APITAG LDAP SDK version from commit APITAG up to commit APITAG where the issue was reported and fixed contains an Incorrect Access Control vulnerability in process function in APITAG class doesn't check for empty password when running in synchronous mode. commit with applied fix URLTAG that can result in Ability to impersonate any valid user. This attack appear to be exploitable via Providing valid username and empty password against servers that do not do additional validation as per FILETAG This vulnerability appears to have been fixed in after commit APITAG.",
    "CWE-388": "In all Kubernetes versions prior to NUMBERTAG and NUMBERTAG incorrect handling of error responses to proxied upgrade requests in the kube apiserver allowed specially crafted requests to establish a connection through the Kubernetes API server to backend servers, then send arbitrary requests over the same connection directly to the backend, authenticated with the Kubernetes API server's TLS credentials used to establish the backend connection.",
    "CWE-172": "Encoding Error. The software does not properly encode or decode the data, resulting in unexpected values. Unexpected State. null. Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'). The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Execute Unauthorized Code or Commands. The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries. Modify Files or Directories. The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication. Read Files or Directories. The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system. DoS. Crash, Exit, or Restart. The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. Improper Resolution of Path Equivalence. The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object. Read Files or Directories. Modify Files or Directories. Bypass Protection Mechanism. An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism. Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object. Improper Handling of Alternate Encoding. The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent. Bypass Protection Mechanism. null. Double Decoding of the Same Data. The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations. Bypass Protection Mechanism. Execute Unauthorized Code or Commands. Varies by Context. null. Improper Handling of Mixed Encoding. The software does not properly handle when the same input uses several different (mixed) encodings. Unexpected State. null. Improper Handling of Unicode Encoding. The software does not properly handle when an input contains Unicode encoding. Unexpected State. null. Improper Handling of URL Encoding (Hex Encoding). The software does not properly handle when all or part of an input has been URL encoded. Unexpected State. null. An issue was discovered in PATHTAG in Armadito NUMBERTAG Malware with filenames containing pure UTF NUMBERTAG characters can bypass detection. The user mode service will fail to open the file for scanning after the conversion is done from Unicode to ANSI. This happens because characters that cannot be converted from Unicode are replaced with '?' characters.",
    "CWE-684": "Incorrect Provision of Specified Functionality. The code does not function according to its published specifications, potentially leading to incorrect usage. Quality Degradation. When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state. UI Discrepancy for Security Feature. The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state. Varies by Context. When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a restrict ALL' access control rule, but the software only implements restrict SOME. User Interface (UI) Misrepresentation of Critical Information. The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks. Hide Activities. Bypass Protection Mechanism. If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the software or the environment the software is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the software is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. filename.txt .exe). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue. Missing Report of Error Condition. The software encounters an error but does not provide a status code or return value to indicate that an error has occurred. Varies by Context. Unexpected State. Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors. null. Return of Wrong Status Code. A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result. Unexpected State. Alter Execution Logic. This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors. This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not. Expected Behavior Violation. A feature, API, or function does not perform according to its specification. Quality Degradation. Varies by Context. null. Improper Finite State Machines (FSMs) in Hardware Logic. Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system. Unexpected State. DoS. Crash, Exit, or Restart. DoS. Instability. Gain Privileges or Assume Identity. The functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees. In qutebrowser versions less than NUMBERTAG reloading a page with certificate errors shows a green URL. After a certificate error was overridden by the user, qutebrowser displays the URL as yellow APITAG However, when the affected website was subsequently loaded again, the URL was mistakenly displayed as green APITAG While the user already has seen a certificate error prompt at this point (or set APITAG to false, which is not recommended), this could still provide a false sense of security. This has been fixed in NUMBERTAG and NUMBERTAG All versions of qutebrowser are believed to be affected, though versions before NUMBERTAG couldn't be tested. Backported patches for older versions (greater than or equal to NUMBERTAG and less than or equal to NUMBERTAG are available, but no further releases are planned.",
    "CWE-209": "Generation of Error Message Containing Sensitive Information. The software generates an error message that includes sensitive information about its environment, users, or associated data. Read Application Data. Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server. The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query. Self-generated Error Message Containing Sensitive Information. The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information. Read Application Data. null. Externally-Generated Error Message Containing Sensitive Information. The application performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the application, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information. Read Application Data. null. Insertion of Sensitive Information Into Sent Data. The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor. Read Files or Directories. Read Memory. Read Application Data. Sensitive data may be exposed to attackers. Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). Uncaught Exception in Servlet. The Servlet does not catch all exceptions, which may reveal sensitive debugging information. Read Application Data. DoS. Crash, Exit, or Restart. When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components. Missing Custom Error Page. The software does not return custom error pages to the user, possibly exposing sensitive information. Read Application Data. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application. null. Server-generated Error Message Containing Sensitive Information. Certain conditions, such as network failure, will cause a server error message to be displayed. Read Application Data. While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems. Improper Neutralization of Script in an Error Message Web Page. The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page. Read Application Data. Execute Unauthorized Code or Commands. Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible. DISPUTED A full path disclosure vulnerability was discovered in Matomo NUMBERTAG where a user can trigger a particular error to discover the full path of Matomo on the disk, because ERRORTAG is used in PATHTAG NOTE: the vendor disputes the significance of this issue, stating \"avoid reporting path disclosures, as we don't consider them as security vulnerabilities.\".",
    "CWE-672": "Operation on a Resource after Expiration or Release. The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked. Modify Application Data. Read Application Data. If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity. Other. DoS. Crash, Exit, or Restart. When a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash. null. Use of a Key Past its Expiration Date. The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key. Bypass Protection Mechanism. Gain Privileges or Assume Identity. The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim. While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength. Insufficient Session Expiration. According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization. Bypass Protection Mechanism. null. Expired Pointer Dereference. The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid. Read Memory. If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application. DoS. Crash, Exit, or Restart. If the expired pointer references a memory location that is not accessible to the program, or points to a location that is malformed (such as NULL) or larger than expected by a read or write operation, then a crash may occur. Execute Unauthorized Code or Commands. If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible. When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution. Use of Expired File Descriptor. The software uses or accesses a file descriptor after it has been closed. Read Files or Directories. The program could read data from the wrong file. DoS. Crash, Exit, or Restart. Accessing a file descriptor that has been closed can cause a crash. After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device. Return of Stack Variable Address. A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash. Read Memory. Modify Memory. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. If the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used. If the address is used for reading, then the address itself may be exposed, or the contents that the address points to. If the address is used for writing, this can lead to a crash and possibly code execution. Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced. Premature Release of Resource During Expected Lifetime. The program releases a resource that is still intended to be used by the program itself or another actor. Read Application Data. Read Memory. If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity. DoS. Crash, Exit, or Restart. When the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash. Execute Unauthorized Code or Commands. Modify Application Data. Modify Memory. When the resource is released, the software might modify some of its structure. This might affect program logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses. This weakness focuses on errors in which the program should not release a resource, but performs the release anyway. This is different than a weakness in which the program releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access. When a program releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution. Improper Update of Reference Count. The software uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count. Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released. Improper Validation of Certificate Expiration. A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age. Other. The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing. Other. Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks. When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost. An invalid memory address dereference was discovered in load_pnm in frompnm.c in libsixel before NUMBERTAG.",
    "CWE-915": "Improperly Controlled Modification of Dynamically-Determined Object Attributes. The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified. Modify Application Data. An attacker could modify sensitive data or program variables. Execute Unauthorized Code or Commands. Varies by Context. Alter Execution Logic. If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection. Deserialization of Untrusted Data. The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. Modify Application Data. Unexpected State. Attackers can modify unexpected objects or data that was assumed to be safe from modification. DoS. Resource Consumption (CPU). If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate. Varies by Context. The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation. It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell. Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). The software receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype. Modify Application Data. LIKELIHOOD. High. An attacker can inject attributes that are used in other components. DoS. Crash, Exit, or Restart. LIKELIHOOD. High. An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). This weakness is usually exploited by using a special attribute of objects called proto, constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively. The Cloud Functions subsystem in APITAG NUMBERTAG might allow fabrication attacks by making billions of APITAG requests before an AES NUMBERTAG GCM key rotation occurs. APITAG in APITAG jackson databind before NUMBERTAG mishandles default typing when ehcache is used (because of APITAG leading to remote code execution.",
    "CWE-19": "plugin.js in the w8tcha APITAG plugin before NUMBERTAG for APITAG mishandles SCRIPT elements.",
    "CWE-310": "The authenticated encryption feature in the symmetric encryption implementation in the OWASP Enterprise Security API (ESAPI) for Java NUMBERTAG before NUMBERTAG does not properly resist tampering with serialized ciphertext, which makes it easier for remote attackers to bypass intended cryptographic protection mechanisms via an attack against the intended cipher mode in a non default configuration, a different vulnerability than CVETAG .",
    "CWE-613": "Improper Authentication. When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. Read Application Data. Gain Privileges or Assume Identity. Execute Unauthorized Code or Commands. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code. null. Insufficient Session Expiration. According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization. Bypass Protection Mechanism. null. Cross-Site Request Forgery (CSRF). The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. Gain Privileges or Assume Identity. Bypass Protection Mechanism. Read Application Data. Modify Application Data. DoS. Crash, Exit, or Restart. The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. NETGEAR JNR NUMBERTAG devices before NUMBERTAG have Incorrect Access Control because the ok value of the auth cookie is a special case. aio libs aiohttp session version NUMBERTAG and earlier contains a APITAG vulnerability in APITAG and APITAG that can result in Non expiring sessions / Infinite lifespan. This attack appear to be exploitable via Recreation of a cookie post expiry with the same value.",
    "CWE-1187": "Dropbox Lepton NUMBERTAG allows APITAG (SEGV and application crash) via a malformed lepton file because the code does not ensure setup of a correct number of threads.",
    "CWE-943": "Improper Neutralization of Special Elements in Data Query Logic. The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query. Bypass Protection Mechanism. Read Application Data. Modify Application Data. Varies by Context. Depending on the capabilities of the query language, an attacker could inject additional logic into the query to: Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated Append additional commands to the query Return more entities than intended Return fewer entities than intended Cause entities to be sorted in an unexpected way The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges. While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and NoSQL languages. Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'). The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Read Application Data. Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities. Bypass Protection Mechanism. If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password. Bypass Protection Mechanism. If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability. Modify Application Data. Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes. Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'). The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. Execute Unauthorized Code or Commands. Read Application Data. Modify Application Data. An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior. null. Improper Neutralization of Data within XPath Expressions ('XPath Injection'). The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. Bypass Protection Mechanism. Controlling application flow (e.g. bypassing authentication). Read Application Data. The attacker could read restricted XML content. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'). The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. Read Application Data. An attacker might be able to read sensitive information from the XML database. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). Improper Neutralization of Special Elements used in an OS Command in bookmarking function of Newsbeuter versions NUMBERTAG through NUMBERTAG allows remote attackers to perform user assisted code execution by crafting an RSS item that includes shell code in its title and/or URL.",
    "CWE-90": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'). The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. Execute Unauthorized Code or Commands. Read Application Data. Modify Application Data. An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior. null. ldapauth fork before NUMBERTAG allows remote attackers to perform LDAP injection attacks via a crafted username.",
    "CWE-704": "Incorrect Type Conversion or Cast. The software does not correctly convert an object, resource, or structure from one type to a different type. Other. null. Incorrect Conversion between Numeric Types. When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. Unexpected State. Quality Degradation. The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability. null. Access of Resource Using Incompatible Type ('Type Confusion'). The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type. Read Memory. Modify Memory. Execute Unauthorized Code or Commands. DoS. Crash, Exit, or Restart. When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution. When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues. Attempt to Access Child of a Non-structure Pointer. Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption. Modify Memory. Adjacent variables in memory may be corrupted by assignments performed on fields after the cast. DoS. Crash, Exit, or Restart. Execution may end due to a memory access error. null. A type confusion issue was discovered in CCN lite NUMBERTAG leading to a memory access violation and a failure of the nonce feature (which, for example, helped with loop prevention). APITAG assumes that the union member s is of type ccnl_pktdetail_ndntlv_s. However, if the type is in fact struct ccnl_pktdetail_ccntlv_s or struct ccnl_pktdetail_iottlv_s, the memory at that point is either uninitialised or points to data that is not a nonce, which renders the code using the local variable nonce pointless. A later nonce check is insufficient."
}